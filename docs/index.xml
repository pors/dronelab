<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>dronelab.dev</title>
<link>https://dronelab.dev/</link>
<atom:link href="https://dronelab.dev/index.xml" rel="self" type="application/rss+xml"/>
<description>DroneLab - Coding Autonomous Drones in Baby Steps.</description>
<generator>quarto-1.7.27</generator>
<lastBuildDate>Sat, 24 May 2025 21:00:00 GMT</lastBuildDate>
<item>
  <title>Getting reproducible training results with Fast.ai + PyTorch</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/getting-reproducible-results/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-25</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Getting reproducible PyTorch/Fast.ai training results requires more than just seeding random number generators. Reproducibility is affected by three factors:</p>
<ol type="1">
<li>seeding RNGs,</li>
<li>using deterministic algorithms, and</li>
<li>recreating an identical starting state.</li>
</ol>
<p><strong>Key insights</strong>:</p>
<ul>
<li>DataLoaders maintain internal state that persists between training runs. You must recreate DataLoaders before each training run, not just reseed.</li>
<li>DataLoader workers need to be seeded before each run.</li>
</ul>
<p><strong>Minimal setup for reproducibility:</strong></p>
<ul>
<li>Set <code>torch.backends.cudnn.deterministic = True</code></li>
<li>Recreate DataLoaders between runs</li>
<li>Basic RNG seeding <em>and</em> DataLoader worker seeding</li>
</ul>
</div>
</div>
</div>
<p>While training an <a href="../fly-drone-with-image-classification/">image classifier</a>, I became a bit annoyed by the fact that subsequent runs have different results, even though I didn’t change anything.</p>
<p>How can we conduct experiments if we don’t know whether the one parameter I modified caused the change, or if something else was responsible, under the hood?</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why this matters
</div>
</div>
<div class="callout-body-container callout-body">
<p>This cost me days of debugging. When you’re tuning hyperparameters or comparing model architectures, you need to know whether that 2% accuracy improvement is real or just random variance. Without reproducibility, you’re flying blind.</p>
</div>
</div>
<p>Jump to Conclusion</p>
<section id="what-have-i-tried" class="level2">
<h2 class="anchored" data-anchor-id="what-have-i-tried">What have I tried?</h2>
<p>When I did my experiments, I used this at the start of my notebooks:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> seed_everything(seed):</span>
<span id="cb1-2">    random.seed(seed)</span>
<span id="cb1-3">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb1-4">    np.random.seed(seed)</span>
<span id="cb1-5">    torch.manual_seed(seed)</span>
<span id="cb1-6">    torch.cuda.manual_seed_all(seed)</span>
<span id="cb1-7">    torch.cuda.manual_seed(seed)</span>
<span id="cb1-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">seed_everything(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
<p>And in the <code>DataBlock</code>, I provided a seed for the splitter like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span></code></pre></div>
<p>I picked up these snippets in the Fast.ai course, but I don’t really know what each of these statements does in detail. I understand the general idea: ensure that when a random number is generated, it starts from the same seed, so that the random number is consistent each time. Like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Without seed:"</span>, random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb3-4">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"With seed 42:"</span>, random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb3-6">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"With seed 42 again:"</span>, random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>Without seed: 15 60 38
With seed 42: 81 14 3
With seed 42 again: 81 14 3</code></pre>
</div>
<p>Unfortunately, it is not that simple, proven by the fact that it didn’t work for me. Here is an experiment that shows that loss numbers are not reproducible despite seeding “everything”: <a href="https://colab.research.google.com/drive/1BDCNvpn7MFiTE0k-q21A-YKoYAiGypug?usp=sharing" target="_blank">Getting reproducible results with Fast.ai / PyTorch - Attempt #1</a>.</p>
<p>Perhaps a good time to read the documentation.</p>
</section>
<section id="rtfm" class="level2">
<h2 class="anchored" data-anchor-id="rtfm">RTFM</h2>
<section id="fast.ai-docs" class="level3">
<h3 class="anchored" data-anchor-id="fast.ai-docs">Fast.ai docs</h3>
<p>There is currently no section to be found in the Fast.ai docs covering reproducibility, but there was in version one (deprecated): <a href="https://fastai1.fast.ai/dev/test.html#getting-reproducible-results" target="_blank">Getting reproducible results</a>:</p>
<blockquote class="blockquote">
<p>In some situations you may want to remove randomness for your tests. To get identical reproducible results set, you’ll need to set num_workers=1 (or 0) in your DataLoader/DataBunch, and depending on whether you are using torch’s random functions, or python’s (numpy) or both:</p>
</blockquote>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># python RNG</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-5">random.seed(seed)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pytorch RNGs</span></span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb5-9">torch.manual_seed(seed)</span>
<span id="cb5-10">torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numpy RNG</span></span>
<span id="cb5-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-15">np.random.seed(seed)</span></code></pre></div>
<p>The Python and numpy parts speak for themselves. I will dive into the PyTorch statements in a moment.</p>
<p>If we compare this code with what I did in my first attempt, the only thing that is new is <code>num_workers=1</code> for dataloaders.</p>
<p>I tried that, and nope: still not reproducible.</p>
<p>The current docs don’t have a section like the one above, but there is a function <a href="https://docs.fast.ai/torch_core.html#set_seed" target="_blank">set_seed</a> (only available in Fast.ai). Let’s have a look at the <a href="https://github.com/fastai/fastai/blob/main/fastai/torch_core.py#L161" target="_blank">source code</a>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_seed(s, reproducible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Set random seed for `random`, `torch`, and `numpy` (where available)"</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>: torch.manual_seed(s)</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>: torch.cuda.manual_seed_all(s)</span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>: np.random.seed(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-9">    random.seed(s)</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> reproducible:</span>
<span id="cb6-11">        torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-12">        torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>So, mostly the same stuff, except: <code>torch.backends.cudnn.benchmark = False</code>. Which leads us to the PyTorch docs…</p>
</section>
<section id="pytorch-docs" class="level3">
<h3 class="anchored" data-anchor-id="pytorch-docs">PyTorch docs</h3>
<p>Luckily, there is a note about reproducibility in the PyTorch docs: <a href="https://docs.pytorch.org/docs/stable/notes/randomness.html" target="_blank">Reproducibility</a>.</p>
<p>There is a warning at the top of the document that I will repeat here.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Deterministic operations are often slower than nondeterministic operations, so single-run performance may decrease for your model. However, determinism may save time in development by facilitating experimentation, debugging, and regression testing.</p>
</div>
</div>
<p>So it might be worth trying to make everything deterministic during our early experiments (with a smaller dataset and smaller base model), and when we are confident we are on the right track, we switch to nondeterministic.</p>
<p>Sounds great! But first we have to get the deterministic part working in the first place…</p>
<p>The PyTorch doc consists of three sections. Let’s go through them one by one.</p>
<section id="controlling-sources-of-randomness" class="level4">
<h4 class="anchored" data-anchor-id="controlling-sources-of-randomness">1. Controlling sources of randomness</h4>
<p>Apart from reiterating the assignment of a fixed seed for Python, NumPy, and PyTorch, it also discusses the <code>cudnn.benchmark</code> feature we saw earlier. <code>cudnn</code> is a library built on top of CUDA that accelerates the training of neural networks. Apparently, it starts by trying out a couple of approaches (that’s the benchmarking), and picks the winner for the rest of the training. There is randomness involved in this benchmarking, so setting it to <code>False</code> should make the process deterministic.</p>
<p>What happened when I tried this?</p>
<p>-&gt; Still no reproducible results!</p>
</section>
<section id="avoiding-nondeterministic-algorithms" class="level4">
<h4 class="anchored" data-anchor-id="avoiding-nondeterministic-algorithms">2. Avoiding nondeterministic algorithms</h4>
<p>Now it gets interesting! PyTorch provides a method that might solve our problems: <a href="https://docs.pytorch.org/docs/stable/generated/torch.use_deterministic_algorithms.html#torch.use_deterministic_algorithms" target="_blank">torch.use_deterministic_algorithms(True)</a>.</p>
<p>This statement instructs all other Torch code to use the deterministic variant of its algorithms, and if this is not possible, to throw an exception.</p>
<p>And that is exactly what I got, an exception:</p>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-12-25c053374517&gt; in &lt;cell line: 0&gt;()
      1 learn = vision_learner(dls, resnet18, metrics=error_rate)
----&gt; 2 learn.fine_tune(3)

21 frames
/usr/local/lib/python3.11/dist-packages/torch/nn/modules/linear.py in forward(self, input)
    123 
    124     def forward(self, input: Tensor) -&gt; Tensor:
--&gt; 125         return F.linear(input, self.weight, self.bias)
    126 
    127     def extra_repr(self) -&gt; str:

RuntimeError: Deterministic behavior was enabled with either `torch.use_deterministic_algorithms(True)` or `at::Context::setDeterministicAlgorithms(true)`, but this operation is not deterministic because it uses CuBLAS and you have CUDA &gt;= 10.2. To enable deterministic behavior in this case, you must set an environment variable before running your PyTorch application: CUBLAS_WORKSPACE_CONFIG=:4096:8 or CUBLAS_WORKSPACE_CONFIG=:16:8. For more information, go to https://docs.nvidia.com/cuda/cublas/index.html#results-reproducibility</code></pre>
</div>
<p>It didn’t happen in some exotic part of the library, but at the most elemental level that even I understand: <code>return F.linear(input, self.weight, self.bias)</code>.</p>
<p>The error message is super specific and helpful:</p>
<p><code class="wrap">Deterministic behavior was enabled with either `torch.use_deterministic_algorithms(True)` or `at::Context::setDeterministicAlgorithms(true)`, but this operation is not deterministic because it uses CuBLAS and you have CUDA &gt;= 10.2. To enable deterministic behavior in this case, you must set an environment variable before running your PyTorch application: CUBLAS_WORKSPACE_CONFIG=:4096:8 or CUBLAS_WORKSPACE_CONFIG=:16:8. For more information, go to https://docs.nvidia.com/cuda/cublas/index.html#results-reproducibility</code></p>
<p>Let’s see what version of CUDA we are using on Colab:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.version.cuda)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>12.4</code></pre>
</div>
<p>Following the advice and setting this at the top of the notebook</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CUBLAS_WORKSPACE_CONFIG'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':4096:8'</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or ':16:8'</span></span></code></pre></div>
<p>got me over this hurdle!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Just a “Restart session and run all” is not enough after introducing this environment var. You have to actually disconnect from the colab runtime, connect again, and run all.</p>
</div>
</div>
<p>We got a step further, but another error pops up, now in the backward pass:</p>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-11-af2d886d9870&gt; in &lt;cell line: 0&gt;()
      1 print(os.environ['CUBLAS_WORKSPACE_CONFIG'])
      2 learn = vision_learner(dls, resnet18, metrics=error_rate)
----&gt; 3 learn.fine_tune(3)

22 frames
/usr/local/lib/python3.11/dist-packages/torch/autograd/graph.py in _engine_run_backward(t_outputs, *args, **kwargs)
    821         unregister_hooks = _register_logging_hooks_on_whole_graph(t_outputs)
    822     try:
--&gt; 823         return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
    824             t_outputs, *args, **kwargs
    825         )  # Calls into the C++ engine to run the backward pass

RuntimeError: adaptive_max_pool2d_backward_cuda does not have a deterministic implementation, but you set 'torch.use_deterministic_algorithms(True)'. You can turn off determinism just for this operation, or you can use the 'warn_only=True' option, if that's acceptable for your application. You can also file an issue at https://github.com/pytorch/pytorch/issues to help us prioritize adding deterministic support for this operation.</code></pre>
</div>
<p>Oh, oh, bad news. We have no other choice now to set the <code>warn_only</code> flag to <code>True</code> on the <code>use_deterministic_algorithms</code> call. This indeed allows the fine-tuning run to finish, but still not reproducible :(</p>
</section>
<section id="dataloader" class="level4">
<h4 class="anchored" data-anchor-id="dataloader">3. DataLoader</h4>
<p>Finally, the PyTorch doc about reproducibility mentions the possibility of seeding dataloader workers identically. As we previously used only one worker, I assume this won’t have any impact on our case. And guess what: it doesn’t <sup>1</sup>!</p>
<p>Here is the notebook where I did all the experiments as recommended in the docs: <a href="https://colab.research.google.com/drive/1b2F6J_-FhG37odYyrJPxBdjPtyTzJGkn?usp=sharing" target="_blank">Getting reproducible results with Fast.ai / PyTorch - Attempt #2</a>. BTW the Colab GPU was of type L4.</p>
<p>Speaking of GPUs: would we get reproducible results if we run it on a CPU? The answer is NO (I tried) <sup>2</sup>.</p>
</section>
</section>
</section>
<section id="lets-get-some-help-hello-claude" class="level2">
<h2 class="anchored" data-anchor-id="lets-get-some-help-hello-claude">Let’s get some help (hello Claude)</h2>
<p>The documentation didn’t really help. All the tricks to keep everything deterministic failed. It could be the backward pass, in which case we don’t have much hope of resolving it. But how do people train their models if you can’t do any experiments where just one meta-parameter changes?</p>
<p>Anyway, we are not giving up! Let’s ask our friend the LLM.</p>
<p>Claude speaks:</p>
<blockquote class="blockquote">
<p>When you create a DataLoader in PyTorch, it establishes its own internal random state that becomes decoupled from the global random seed. The DataLoader contains several stateful components that persist between training runs:</p>
<p>The DataLoader’s internal random number generator gets initialized when you first create it, and this generator maintains its own state independently of any subsequent global seed resets. Even though you call seed_everything(42) before each run, the DataLoader’s internal RNG has already advanced its state from the previous run and won’t reset back to its initial position.</p>
<p>The data shuffling mechanism also maintains state. Even with a fixed seed in your RandomSplitter, the underlying shuffling operations within the DataLoader can accumulate state changes that persist across runs, leading to subtle differences in the exact order that batches are presented to your model.</p>
</blockquote>
<p>Ah, of course, state is the key thing here! Random generators can start nicely with the same seed again, but if the state is not the same as it was before, that has no impact!</p>
<p>So let’s apply that wisdom by setting the seeds <em>and</em> recreate the <code>DataLoader</code> before starting a new training run…</p>
<p>Victory, we have reproducible results now! Have a look at this winning notebook: <a href="https://colab.research.google.com/drive/1yphkoDvcmb67JGXXCFK_dRN74VEY72lm?usp=sharing" target="_blank">Getting reproducible results with Fast.ai / PyTorch - Attempt #3</a>.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Even with the most conservative setup, like in this notebook, there can be small differences between runs. I noticed this when changing the GPU model from L4 to A100. This is acknowledged in the PyTorch documentation.</p>
</div>
</div>
<p>There is just one problem with it: it has become really slow.</p>
</section>
<section id="hhhhh" class="level2">
<h2 class="anchored" data-anchor-id="hhhhh">^H^H^H^H^H</h2>
<p>For you younger kids: ^H is the backspace character in Unix-type terminals. In other words, let’s delete some of the things we have done to increase reproducibility at the cost of performance.</p>
<section id="observations" class="level3">
<h3 class="anchored" data-anchor-id="observations">Observations</h3>
<section id="num_workers" class="level4">
<h4 class="anchored" data-anchor-id="num_workers">num_workers:</h4>
<p>Changing from <code>num_workers=0</code> to <code>num_workers=12</code> <sup>3</sup> maintains reproducibility, but only if the workers are seeded as follows (from the PyTorch docs):</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> seed_worker(worker_id):</span>
<span id="cb12-2">    worker_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.initial_seed() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-3">    numpy.random.seed(worker_seed)</span>
<span id="cb12-4">    random.seed(worker_seed)</span>
<span id="cb12-5"></span>
<span id="cb12-6">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator()</span>
<span id="cb12-7">g.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9">DataLoader(</span>
<span id="cb12-10">    train_dataset,</span>
<span id="cb12-11">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb12-12">    num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers,</span>
<span id="cb12-13">    worker_init_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed_worker,</span>
<span id="cb12-14">    generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g,</span>
<span id="cb12-15">)</span></code></pre></div>
<p>This also maintains reproducibility across sessions.</p>
<p>I’m very happy this works as it speeds up things significantly!</p>
</section>
<section id="use_deterministic_algorithms" class="level4">
<h4 class="anchored" data-anchor-id="use_deterministic_algorithms">use_deterministic_algorithms:</h4>
<p>Removing <code>torch.use_deterministic_algorithms(True)</code> also maintains reproducibility, both in the notebook and across sessions <sup>4</sup>.</p>
</section>
<section id="set_seed" class="level4">
<h4 class="anchored" data-anchor-id="set_seed">set_seed:</h4>
<p>Setting the second parameter of <code>set_seed</code>, <code>reproducible</code> to <code>False</code> (which is the default) basically sets <code>torch.backends.cudnn.benchmark = False</code> in our case. This also maintains reproducibility, both in the notebook and across sessions.</p>
</section>
<section id="cudnn.deterministic" class="level4">
<h4 class="anchored" data-anchor-id="cudnn.deterministic">cudnn.deterministic:</h4>
<p>Setting <code>torch.backends.cudnn.deterministic = False</code> breaks reproducibility, so it is essential when running meaningful experiments. I hardly saw any performance degradation by setting this to <code>True</code>, but that might be different for other use cases.</p>
<p><strong>Key findings</strong>: as long as you seed every DataLoader worker and keep <code>torch.backends.cudnn.deterministic = True</code>, you can crank <code>num_workers</code> back up, drop <code>torch.use_deterministic_algorithms(True)</code>, and rely on the default <code>set_seed(..., reproducible=False)</code>: reproducibility still holds across notebook sessions while you recover full training speed.</p>
<p>The notebook that has applied the above, and is fast and reproducible, is here: <a href="https://colab.research.google.com/drive/1fOHcdEDja9OzmIBLkGqTiRf6gknVJGy-?usp=sharing" target="_blank">Getting reproducible results with Fast.ai / PyTorch - Attempt #4</a></p>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These conclusions are probably not generic for all training pipelines and base models, but they probably are for convolutional networks like Resnet18. It might be different for transformer-based models, who knows. At least we know what knobs we can turn to get reproducible results.</p>
</div>
</div>
<p>Reproducible training comes down to three levers:</p>
<ol type="1">
<li>Seed every RNG – Python random, NumPy, and each DataLoader worker (worker_init_fn + torch.Generator).</li>
<li>Force deterministic kernels <code>torch.backends.cudnn.deterministic = True</code> (leave benchmarking off while you experiment).</li>
<li>Start from the same state: rebuild the DataLoader before each fresh run so its internal sampler is reset.</li>
</ol>
<p>If you are using Fast.ai, use the <a href="https://colab.research.google.com/drive/1fOHcdEDja9OzmIBLkGqTiRf6gknVJGy-?usp=sharing" target="_blank">Fast.ai notebook</a> as a reference for reproducible training.</p>
<p>In the end it comes down to:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First run</span></span>
<span id="cb13-2">seed_everything(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb13-3">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator()</span>
<span id="cb13-4">g.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb13-5">torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb13-6">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(g)</span>
<span id="cb13-7">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb13-8">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Next run(s)</span></span>
<span id="cb13-11">seed_everything(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb13-12">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator()</span>
<span id="cb13-13">g.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb13-14">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(g)</span>
<span id="cb13-15">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb13-16">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<p>If you prefer to just use PyTorch, use the <a href="https://colab.research.google.com/drive/1DB--1tnAOGdc5wgHNFc0KE5xhcJFRXgh?usp=sharing" target="_blank">PyTorch notebook</a> (Claude generated this based on the Fast.ai version).</p>
<p>Once you move from experimentation to full-scale training, you can flip <code>torch.backends.cudnn.deterministic = False</code> to potentially regain speed. Just remember that it will sacrifice strict repeatability.</p>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next</h2>
<p>Another interlude that got a bit out of hand. Time to go back to our <a href="../fly-drone-with-image-classification/">image classifier</a> and see if we can improve it. Read on…</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As I found out later, it certainly does matter when using more than one worker, which is what you always want in order to have acceptable performance.↩︎</p></li>
<li id="fn2"><p>With what I know now, this is because I didn’t recreate the dataloaders between runs. If we did that and used a CPU, the results would be reproducible.↩︎</p></li>
<li id="fn3"><p>This is the default in my case; it is calculated as <code>min(16, os.cpu_count())</code>.↩︎</p></li>
<li id="fn4"><p>This stays repeatable unless your model calls a layer that can’t guarantee identical results on the GPU; in that case, the numbers may shift a bit between runs, or PyTorch will throw a warning.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>machine learning</category>
  <category>colab</category>
  <category>computer vision</category>
  <category>fast.ai</category>
  <category>pytorch</category>
  <guid>https://dronelab.dev/posts/getting-reproducible-results/</guid>
  <pubDate>Sat, 24 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/getting-reproducible-results/reproducible.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Interlude: Which image models are best? UPDATED</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/which-image-models-are-best-updated/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-19</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to choose the best image classification models using updated data and tools.</li>
<li>See how the popular “Which image models are best?” notebook was revived with new sources and recent models.</li>
<li>Get links to interactive notebooks and a Gradio app for hands-on model comparison.</li>
</ul>
</div>
</div>
</div>
<p>In <a href="../fly-drone-with-image-classification/">my attempts to create an image classifier</a>, following the Fast.ai method as learned in lesson 2, I wanted to try other base-models. A way to help pick the most suitable model was presented in <a href="https://course.fast.ai/Lessons/lesson3.html" target="_blank">lesson 3</a>.</p>
<p>Jeremy Howard created this amazing notebook that helps selecting a model for your use case: <a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/notebook" target="_blank">Which image models are best?</a>. Unfortunately the notebook is two years old and is no longer working.</p>
<p>The notebook gets its data from the <code>timm</code> computer vision library. It is currently part of Huggingface <a href="https://huggingface.co/docs/timm/index" target="_blank">here</a>.</p>
<section id="what-is-timm" class="level2">
<h2 class="anchored" data-anchor-id="what-is-timm">What is timm?</h2>
<p>As far as I understand it, <code>timm</code> is a collection of PyTorch compatible models focussed on computer vision, so all about images: classification, segmentation and more. Apart from a lot of models (old and new, small and large) it has other helpful stuff (helpful for people who know what this all about, not me…, yet! :)).</p>
<p>From the Huggingface docs:</p>
<blockquote class="blockquote">
<p><code>timm</code> is a library containing SOTA computer vision models, layers, utilities, optimizers, schedulers, data-loaders, augmentations, and training/evaluation scripts.</p>
<p>It comes packaged with &gt;700 pretrained models, and is designed to be flexible and easy to use.</p>
</blockquote>
<p>It started as <a href="https://huggingface.co/rwightman" target="_blank">Ross Wightman</a>’s solo project, but now it’s part of the Hugging Face ecosystem.</p>
<p>For me <code>timm</code> is relevant, because it allows me to try different models that can improve the <a href="../fly-drone-with-image-classification/">is there a lamp classifier</a>, and in the future, for more advanced stuff we will do.</p>
</section>
<section id="great-visualization-outdated" class="level2">
<h2 class="anchored" data-anchor-id="great-visualization-outdated">Great visualization (outdated)</h2>
<p>Jeremy Howard used the <code>timm</code> data to make is easier to select models to try out. He created a <a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/notebook" target="_blank">notebook</a> that includes graphs like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/which-image-models-are-best-updated/timm2.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot: Inference top1 accuracy / speed scatter</figcaption>
</figure>
</div>
<p>As said, unfortunately it no longer works if you copy it to your own account (the data sources have moved to Huggingface), and worst: it doesn’t contain information from more recent models.</p>
<p>The <a href="https://huggingface.co/spaces/timm/leaderboard" target="_blank">timm leaderboard</a> is meant to replace it, but it is not as clear IMO. I want the same happy colorful interactive bubbles!</p>
<p>Should be easy to fix, so let’s get to it!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why not use an LLM?
</div>
</div>
<div class="callout-body-container callout-body">
<p>Yeah, great question! We could also dump all data into an LLM and ask it to create some useful visualizations. It has the advantage that you can chat about the data as well to make the right choice.</p>
<p>Sometimes, however, it feels just easier to play around in a notebook IMO. Also, in this specific case, it is not so easy to get the same results: you are basically describing to the LLM in text what we (Jeremy) did here with code.</p>
</div>
</div>
</section>
<section id="visualization-repaired" class="level2">
<h2 class="anchored" data-anchor-id="visualization-repaired">Visualization repaired</h2>
<p>As said, it was mostly a matter of pointing to the new data sources and to include a couple of newer models that are SOTA (I asked ChatGPT DeepSearch which ones are). I also found the original data sources and recreated the original charts next to the new ones.</p>
<p>The notebook I used for my experiments, with both the new and the old data sources, is here: <a href="https://colab.research.google.com/drive/1ImwK73r2Pjc2qpDb2Ov5Gn8y-ZEHyQPZ?usp=sharing" target="_blank">Which image models are best? (updated)</a>.</p>
<p>I also created a copy <a href="https://www.kaggle.com/code/mapors/which-image-models-are-best/" target="_blank">on Kaggle here</a>. Kaggle has some problems rendering the plotly charts (which I fixed in part): they don’t show up unless in edit mode…</p>
<p>Finally I created a version with less text, and more flexibility:</p>
<ul>
<li>you can select the benchmark file</li>
<li>limit the included model families</li>
<li>change what charts will display on x- and y-axis</li>
<li>when new benchmarks are published, they wil be included</li>
</ul>
<p>It can be found here: <a href="https://colab.research.google.com/drive/1yhjNeqneaBAb_uyIYNVYI24pSBZQdUt3?usp=sharing" target="_blank">Which image models are best? (improved)</a>.</p>
</section>
<section id="deploying-it-on-huggingface-with-gradio" class="level2">
<h2 class="anchored" data-anchor-id="deploying-it-on-huggingface-with-gradio">Deploying it on Huggingface with Gradio</h2>
<p>I asked Claude to port the notebook to a Gradio app, and after some tweaks it seems to work just fine:</p>
<p><a href="https://huggingface.co/spaces/pors/Which-image-models-are-best" target="_blank">Image Model Performance Analysis</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/which-image-models-are-best-updated/gradio-app.png" class="img-fluid figure-img"></p>
<figcaption>The Gradio app on Huggingface</figcaption>
</figure>
</div>
<p>Pretty cool, no?</p>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next</h2>
<p>This interlude got a bit out of hand. Time to go back to our <a href="../fly-drone-with-image-classification/">image classifier</a> and pick a better model. Read on…</p>


</section>

 ]]></description>
  <category>machine learning</category>
  <category>timm</category>
  <category>computer vision</category>
  <category>fast.ai</category>
  <category>open-source</category>
  <guid>https://dronelab.dev/posts/which-image-models-are-best-updated/</guid>
  <pubDate>Sun, 18 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/which-image-models-are-best-updated/timm.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Fly a drone with: Image classification</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/fly-drone-with-image-classification/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-15</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to build a simple image classifier to help a drone detect obstacles (like lamps) using fast.ai.</li>
<li>See the real-world challenges of collecting and cleaning training data for image classification.</li>
<li>Discover the impact of label noise, data imbalance, and augmentation on model performance.</li>
<li>Get practical tips on improving results: manual data cleaning, trying different resizing/augmentation, tuning batch size, and testing better base models.</li>
<li>Understand the importance of reproducibility and the limits of small datasets.</li>
<li>Follow a step-by-step, experiment-driven approach—ideal for beginners like myself wanting to apply machine learning to robotics.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/tello-controller-navigation-part-2/">← Previous: Tello controller navigation - Part 2</a>
</div>
</div>
</div>
</div>
</div>
<section id="the-path-to-autonomous-flying" class="level2">
<h2 class="anchored" data-anchor-id="the-path-to-autonomous-flying">The path to autonomous flying</h2>
<p>Now that we have the Tello / RoboMaster TT under control with a mobile app, a keyboard, and a game controller we can make the first steps to remove control all together.</p>
<p>I’m sure there have been written many books about this subject and there is loads of scientific research:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/fly-drone-with-image-classification/papers-autonomous-drones.png" class="img-fluid figure-img"></p>
<figcaption>Google scholar search for “autonomous drones”</figcaption>
</figure>
</div>
<p>Over 17k results since 2024; OMG! Good thing that LLM’s have read all that :)</p>
<p>I’m not going to do anything with it for now, let’s just try out a couple of naive ideas and see were we end up.</p>
</section>
<section id="naive-approach-1-image-classification" class="level2">
<h2 class="anchored" data-anchor-id="naive-approach-1-image-classification">Naive approach #1: Image classification</h2>
<p>No, of course image classification is not the solution to autonomous flying, but probably it is in there somewhere, and I am following the <a href="https://course.fast.ai/">Fast.ai course</a> which starts off with image classification.</p>
<p>Jeremy Howard is the man behind both the <a href="https://github.com/fastai/fastai">Fast.ai library</a> and the course, and his approach is to create a simple baseline model first:</p>
<blockquote class="blockquote">
<p>Baseline: A simple model which you are confident should perform reasonably well. It should be very simple to implement, and very easy to test, so that you can then test each of your improved ideas, and make sure they are always better than your baseline. Without starting with a sensible baseline, it is very difficult to know whether your super-fancy models are actually any good.</p>
</blockquote>
<p>So, that’s what I am going to do: fine-tune an image classifier with a limited amount of data and with a simple base model.</p>
<p>The testing ground for my drone has a couple of very obvious obstacles: lamps handing from the ceiling. So this is going to be a lamp or no-lamp in the room image classifier.</p>
</section>
<section id="lamp-or-no-lamp-image-classifier" class="level2">
<h2 class="anchored" data-anchor-id="lamp-or-no-lamp-image-classifier">Lamp or no-lamp image classifier 😞 → 😐 → 🙂 → 😊 → 😃 → 😁</h2>
<section id="first-attempt" class="level3">
<h3 class="anchored" data-anchor-id="first-attempt">First attempt 😞</h3>
<p>My first attempt can be seen here: <a href="https://colab.research.google.com/drive/1QaIn0EaqsohlFDD6tXMaGLoD9nCyskHC?usp=sharing">Baseline model: Is there a lamp?</a>.</p>
<p>Not a great result (understatement), it over-fits from the start, and the reason is obvious: label noise (jargon for have data labelled wrong).</p>
<p>Here are some wonderful samples from the training set:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/fly-drone-with-image-classification/label-noise.png" class="img-fluid figure-img"></p>
<figcaption>label noise</figcaption>
</figure>
</div>
<p>It is a bit hard to Google/DDG for interior <em>without</em> hanging lamps, so let’s try training the model another time after manual cleanup.</p>
</section>
<section id="cleanup-of-the-image-labels" class="level3">
<h3 class="anchored" data-anchor-id="cleanup-of-the-image-labels">Cleanup of the image labels</h3>
<p>I said <em>manual</em> cleanup, but I’m going to cheat and use some advanced AI model (CLIP) to be able to train a very simple model.</p>
<p>Code is written by chatgpt: <a href="https://colab.research.google.com/drive/1HoUSkMwQqKWJ10-YCpIMq3sVACpVAUwl?usp=sharing">Lamp Dataset Cleaner (CLIP-based)</a>.</p>
<p>And the result is…. MEH! Not much better than what I started with.</p>
<p>So, back to manual cleaning. I’ll be back soon…</p>
<p>One hour later: DONE!</p>
<p>The result is a huge amount of images with a lamp, and very few without it. Reason being: if you use <code>ceiling</code> in a search term, lamps will show up very often. The query <code>home interior wall  -lamp</code> was quite a bit better, not as many lamps! :)</p>
<p>More manual cleaning to do…</p>
<p>Another hour later: DONE!</p>
</section>
<section id="second-attempt" class="level3">
<h3 class="anchored" data-anchor-id="second-attempt">Second attempt 😐</h3>
<p>With the cleaned up data I did another run, see: <a href="https://colab.research.google.com/drive/10pxEfb82zvp99F98Bjg0gCND8v_eC-AT?usp=sharing">Baseline model: Is there a lamp? Second attempt</a>.</p>
<p>The result I quite a bit better with a ~10% error rate, but there still is over-fitting starting at epoch 2. The 16 top losses look like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/fly-drone-with-image-classification/top-losses.png" class="img-fluid figure-img"></p>
<figcaption>Top losses: Prediction/Actual/Loss/Probability</figcaption>
</figure>
</div>
<p>To be fair, some of these images are pretty tough to classify IMO. Anyway, let’s see if we can do better.</p>
</section>
<section id="third-attempt-better-resizing-and-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="third-attempt-better-resizing-and-augmentation">Third attempt 😐: Better resizing and Augmentation</h3>
<p>There’s a couple of things we can try, here is what I did try:</p>
<p>Resizing with different methods:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Resize(400, ResizeMethod.Pad, pad_mode='zeros')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Resize(400, ResizeMethod.Squish)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Resize(400)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">RandomResizedCrop(400, min_scale=0.6)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">RandomResizedCrop(400, min_scale=0.3)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">RandomResizedCrop(400, min_scale=0.8)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Augmentation:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>item_tfms=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Resize(400, ResizeMethod.Pad, pad_mode='zeros')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb2-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>batch_tfms=aug_transforms()</span></code></pre></div>
<p>The runs can be seen here: <a href="https://colab.research.google.com/drive/1PqKdYnMIHn4KQLDXepr71AH3YdlbuYsf?usp=sharing">Baseline model: Is there a lamp? Third attempt</a>.</p>
<p>Something very annoying is that subsequent runs - without changing anything - have different results, which makes doing experiments impossible. I asked Gemini about it and it said:</p>
<blockquote class="blockquote">
<p>You’ve done a good job providing a seed for reproducibility with seed_everything(42). However, even with careful seeding, variations in results can sometimes occur in deep learning training for a few reasons, especially within an environment like Colab:</p>
<ul>
<li><p>GPU Non-Determinism: While you’ve set torch.backends.cudnn.deterministic = True, not all operations on the GPU are guaranteed to be completely deterministic across different runs or hardware configurations. Some highly optimized kernels might involve non-deterministic algorithms for performance reasons.</p></li>
<li><p>Background Processes in Colab: Colab is a shared environment. While unlikely to cause significant variations, very minor background processes or resource allocation differences could theoretically have a minuscule impact on timing and execution flow, though this is generally not the primary cause of noticeable differences.</p></li>
</ul>
</blockquote>
<p>Hmm, not great. What <em>is</em> great, is that Gemini can see the notebook you are working with, so it can be very helpful when needed. Not this time though :)</p>
<p>Conclusion: nothing really helps. The error rate stays around 10%.</p>
<p>Probably we got everything out of the data we have? Let’s try a couple more things.</p>
</section>
<section id="fourth-attempt-smaller-batch-size" class="level3">
<h3 class="anchored" data-anchor-id="fourth-attempt-smaller-batch-size">Fourth attempt 🙂: smaller batch size</h3>
<p>So far we had a mini-batch size of 32. Let’s have look what happens when we decrease that:</p>
<ul>
<li>No more over-fitting with 3 epochs.</li>
<li>Error-rate goes down to 6-8%!</li>
</ul>
<p>Maybe I am over-fitting with my hyper-parameters? It feels a bit like it, but I don’t have a test set to confirm that… Let’s try that later, when we have a bit more data.</p>
<p>Here is the notebook: <a href="https://colab.research.google.com/drive/1Kj7HL-IXfRC2DOqlaTPbCwafY32X1_kF?usp=sharing">Baseline model: Is there a lamp? Fourth attempt</a>.</p>
<p>I think we have a good baseline here. So let’s go and throw some more power behind it:</p>
<ol type="1">
<li>Use a better base model</li>
<li>Use more training data</li>
</ol>
</section>
<section id="fifth-attempt-use-a-better-base-model" class="level3">
<h3 class="anchored" data-anchor-id="fifth-attempt-use-a-better-base-model">Fifth attempt 😊: use a better base model</h3>
<p>I tried a larger resnet model: <code>resnet34</code>, which (with a smaller mini-batch size of 8) resulted in a 4% error rate, without over-fitting for the first few epochs.</p>
<p>I also had a look here: <a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/notebook">Which image models are best?</a>, and picked <code>convnext_tiny</code>. This model resulted in a 3% error rate, but is significantly slower. Because we want speedy inference later on, we might want to stick with the resnet models.</p>
<p>Notebook for this experiment: <a href="https://colab.research.google.com/drive/1vHMKQxVliGhaJ90D-JaTx4IrDzdqkYnB?usp=sharing">Is there a lamp? Fifth attempt</a>. I removed the phrase <code>Baseline model</code>, because we are now starting to ramp up the actual base model. Not sure if this is the way, but so far it seems to work. Still a bit worried about the test set that is coming up though…</p>
</section>
<section id="sixth-attempt-collect-more-data" class="level3">
<h3 class="anchored" data-anchor-id="sixth-attempt-collect-more-data">Sixth attempt 🤨: collect more data</h3>
<p>My plan was to now collect more data and do some of the previous steps again, but I changed my mind. The possibility that I am over-fitting by trying different hyper-parameters and picking the winners is substantial.</p>
<p>The logical next step would then be to use a test set and see what is going on.</p>
<p>Also: I don’t need to create the best lamp classifier in the world, we are here to learn!</p>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>As said, in the next post I will create a test set (from drone frames), figure out test-set best practices, and finalize our classifier. Read on…</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/tello-controller-navigation-part-2/">← Previous: Tello controller navigation - Part 2</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>tello</category>
  <category>machine learning</category>
  <category>image classification</category>
  <category>fast.ai</category>
  <guid>https://dronelab.dev/posts/fly-drone-with-image-classification/</guid>
  <pubDate>Wed, 14 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/fly-drone-with-image-classification/image-classification-lamps.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tello controller navigation - Part 2</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/tello-controller-navigation-part-2/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-11</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to connect a physical GameSir T1d controller to a real Tello drone using Python and djitellopy, moving beyond simulation.</li>
<li>See how to integrate live video streaming from the Tello into your Pygame app, including handling frames and displaying them in real time.</li>
<li>Get practical code examples for replacing the simulator with a real drone interface, managing video streams, and troubleshooting common issues.</li>
<li>Understand the structure needed to glue together controller input, drone commands, and video feedback for a seamless flying experience.</li>
<li>Prepare for the next step: using this setup as a foundation for future machine learning and autonomous drone experiments.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/tello-controller-navigation-part-1/">← Previous: Tello controller navigation - Part 1</a>
</div>
<div>
<a href="../../posts/fly-drone-with-image-classification/">Next: Fly a drone with: Image classification →</a>
</div>
</div>
</div>
</div>
</div>
<section id="time-to-fly" class="level2">
<h2 class="anchored" data-anchor-id="time-to-fly">Time to fly</h2>
<p>This blog is supposed to show my progress with machine learning, but we haven’t touched that yet at all! That will still be the case in this post, but we are close to wrapping up the drone control.</p>
<p>It is time to combine our previous efforts and connect the drone interface (djitellopy) with the controller interface (gamesir-t1d).</p>
<div style="text-align: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/tello-controller-navigation-part-2/tello-gamesir-t1d-photo.png" class="img-fluid figure-img"></p>
<figcaption>GameSir T1d controlling the Tello / RoboMaster TT</figcaption>
</figure>
</div>
</div>
</section>
<section id="from-simulator-to-tello" class="level2">
<h2 class="anchored" data-anchor-id="from-simulator-to-tello">From simulator to Tello</h2>
<p>Let’s start with the most bare approach and replace the <code>TelloSimulator</code> with a new class <code>TelloDrone</code>, with a similar interface, but driving the Tello via <code>djitellopy</code>.</p>
<p>The <code>FlightController</code> stays as it was, so we have all the deadbanding and smoothing goodies there.</p>
<p>Finally, we need to glue these classes together in a similar way we did with the simulator, but without the “fancy” visualization.</p>
<p>The code looks like this at this stage: <a href="https://github.com/pors/tello-play/tree/245ad32d260e0f178c7deb4f6fe4bec322780508/tt-fly">tt-fly WIP</a>.</p>
<p>And yes, it flies!</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/ITfSsa7b3aQ" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="add-video-streaming" class="level2">
<h2 class="anchored" data-anchor-id="add-video-streaming">Add video streaming</h2>
<p>We accomplished what we were set out to do! At least, I was :) Now that we have some momentum, let’s add the video stream.</p>
<p>The <code>djitellopy</code> library makes it straightforward. In the <code>TelloDrone</code> class we initialize video streaming:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure stream is off before turning it on</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb1-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamoff()</span>
<span id="cb1-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopped any existing video stream"</span>)</span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Note: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize frame reading with low quality settings</span></span>
<span id="cb1-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.set_video_resolution(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.RESOLUTION_480P)</span>
<span id="cb1-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.set_video_fps(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.FPS_30)</span>
<span id="cb1-11"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.set_video_bitrate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.BITRATE_4MBPS)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now turn on the stream</span></span>
<span id="cb1-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamon()</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the frame reader</span></span>
<span id="cb1-17"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_read <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_frame_read()</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Video stream initialized successfully"</span>)</span></code></pre></div>
<p>Also, we add a method to expose the frame reader to the main app:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_video_frame(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the current video frame from the drone."""</span></span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_read <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-7">        frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_read.frame</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> frame <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> frame.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warning: Received empty frame"</span>)</span>
<span id="cb2-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> frame</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb2-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error getting video frame: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<p>Finally, we read frames from the main app and display it in the pygame window:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display video frame if available</span></span>
<span id="cb3-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drone.get_video_frame()</span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> frame <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track FPS</span></span>
<span id="cb3-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-6">    now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last_frame_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate FPS every second</span></span>
<span id="cb3-8">        fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last_frame_time)</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fps_stats.append(fps)</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fps_stats) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb3-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fps_stats.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last_frame_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> now</span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert numpy array to pygame surface</span></span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure frame has the right format for pygame</span></span>
<span id="cb3-18">        frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span>
<span id="cb3-19"></span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a PyGame surface</span></span>
<span id="cb3-21">        h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frame.shape[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-22">        pygame_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Surface((w, h))</span>
<span id="cb3-23">        pygame.surfarray.blit_array(pygame_frame, np.swapaxes(frame, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-24"></span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale if needed</span></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pygame_frame.get_size() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> (</span>
<span id="cb3-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect.width,</span>
<span id="cb3-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect.height,</span>
<span id="cb3-29">        ):</span>
<span id="cb3-30">            pygame_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.transform.scale(</span>
<span id="cb3-31">                pygame_frame, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect.width, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect.height)</span>
<span id="cb3-32">            )</span>
<span id="cb3-33"></span>
<span id="cb3-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(pygame_frame, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect)</span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb3-36">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error displaying frame: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a red border to indicate error</span></span>
<span id="cb3-38">        pygame.draw.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-39"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a placeholder for video</span></span>
<span id="cb3-41">    pygame.draw.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect)</span>
<span id="cb3-42">    no_video <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.font.render(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Video Feed"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>))</span>
<span id="cb3-43">    text_rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> no_video.get_rect(center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.video_rect.center)</span>
<span id="cb3-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(no_video, text_rect)</span></code></pre></div>
<p>Source for the complete code base: <a href="https://github.com/pors/tello-play/tree/main/tt-fly">tt-fly</a></p>
</section>
<section id="test-flight" class="level2">
<h2 class="anchored" data-anchor-id="test-flight">Test flight!</h2>
<p>Time to try it out with an audience:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/DKT5b044EuY" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>I think I worked on this more than enough, and I have a plenty of experience with remote controlling a drone now. Time to move on…</p>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>It is about time to introduce some machine learning. If the goal is to work towards an autonomous drone, at some point I have to get my feet wet. I have plenty of ideas on what to experiment with. Read on for the first one…</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/tello-controller-navigation-part-1/">← Previous: Tello controller navigation - Part 1</a>
</div>
<div>
<a href="../../posts/fly-drone-with-image-classification/">Next: Fly a drone with: Image classification →</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>pygame</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/tello-controller-navigation-part-2/</guid>
  <pubDate>Sat, 10 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/tello-controller-navigation-part-2/tello-gamesir-t1d-photo.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Tello controller navigation - Part 1</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/tello-controller-navigation-part-1/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-07</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to simulate a Tello drone using Python and pygame—no real drone required</li>
<li>See how to connect and control the simulator with a GameSir T1d controller</li>
<li>Discover practical code architecture for drone control, easily swappable with a real Tello/TT</li>
<li>Get insights into input smoothing, command mapping, and realistic flight physics</li>
<li>Find out how simulation helps debug controller issues and speeds up development</li>
<li>Includes code walkthroughs and a live demo video for hands-on understanding</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/gamesir-t1d-controller/">← Previous: GameSir T1d controller &amp; pygame</a>
</div>
<div>
<a href="../../posts/tello-controller-navigation-part-2/">Next: Tello controller navigation - Part 2 →</a>
</div>
</div>
</div>
</div>
</div>
<section id="what-happened-with-the-tello" class="level2">
<h2 class="anchored" data-anchor-id="what-happened-with-the-tello">What happened with the Tello?</h2>
<p>The whole point was to hook up the controller with the Tello/TT, but it was <a href="../../posts/gamesir-t1d-controller/">not as simple</a> as I thought. Now that is behind us we can again focus on our original goal: control the RoboMaster TT with the GameSir T1d through a Python script running on a computer.</p>
<div style="text-align: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/tello-controller-navigation-part-1/tello-gamesir-t1d.png" class="img-fluid figure-img"></p>
<figcaption>GameSir T1d controlling the Tello (simulation)</figcaption>
</figure>
</div>
</div>
</section>
<section id="simulation-first" class="level2">
<h2 class="anchored" data-anchor-id="simulation-first">Simulation first</h2>
<p>I am traveling right now, and didn’t bring my drone, but I did bring the controller so I could at least get some work done. What can we do without the Tello drone? We ask Claude.ai to whip up a simple simulator!</p>
<p>I am interested in the using simulators anyway. The software/model development cycle with an actual drone in the loop is a bit of a hassle. Especially later on with a larger drone. So, in the style of this blog, we start very simple with the most basic of simulators.</p>
</section>
<section id="the-end-result" class="level2">
<h2 class="anchored" data-anchor-id="the-end-result">The end result</h2>
<p>Before we dive into some of the code, let’s see how it looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/tello-controller-navigation-part-1/tello-simulation.png" class="img-fluid figure-img"></p>
<figcaption>Tello simulation</figcaption>
</figure>
</div>
<p>And you can see it in action here: <a href="https://www.youtube.com/watch?v=w1m1eZZjHrk">Gamesir T1d controller with Tello drone simulation demo</a></p>
<p>It all looks a bit lame, but it has already been very useful!</p>
<p>First of all there was a nasty bug in the controller package that periodically told the drone to land (it pressed the A key out of nowhere every now and then).</p>
<p>Secondly, I needed to think about the architecture of the code, which doesn’t really change when we connect the actual drone.</p>
<p>The code is here: <a href="https://github.com/pors/tello-play/blob/main/tello_controller_sim.py">tello_controller_sim.py</a>.</p>
</section>
<section id="how-does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-it-work">How does it work?</h2>
<p>The application simulates a Tello drone’s physics and behavior, providing a visual interface that shows:</p>
<ul>
<li>Top-down and side views of the drone</li>
<li>Telemetry data (position, rotation, battery)</li>
<li>Controller state visualization</li>
<li>Flight path trail</li>
</ul>
<p>The simulation includes realistic features like:</p>
<ul>
<li>Gradual takeoff and landing sequences</li>
<li>Battery consumption</li>
<li>Physical constraints (can’t go below ground)</li>
<li>Input filtering for smoother control</li>
</ul>
<p>The code consists of three classes:</p>
<ol type="1">
<li>TelloSimulator - Simulates the physics and state of a virtual drone</li>
<li>FlightController - Handles controller input and sends commands to the drone</li>
<li>DroneSimulatorApp - Main app that integrates everything with visualization</li>
</ol>
<p>Let’s have a look at each class in detail:</p>
<section id="tellosimulator" class="level3">
<h3 class="anchored" data-anchor-id="tellosimulator">TelloSimulator</h3>
<p>This class creates a virtual model of a Tello drone with (more or less) realistic physics. This will be swapped out with the actual drone through the <code>djitellopy</code> library in my next post.</p>
<section id="key-properties" class="level4">
<h4 class="anchored" data-anchor-id="key-properties">Key Properties:</h4>
<ul>
<li><code>position</code> - 3D position vector [x, y, z] in meters</li>
<li><code>rotation</code> - Yaw rotation in degrees (0-360°)</li>
<li><code>velocity</code> - 4D vector [left/right, forward/back, up/down, yaw]</li>
<li><code>is_connected</code>, <code>is_flying</code>, <code>battery</code> - Drone state tracking</li>
<li><code>is_taking_off</code>, <code>is_landing</code> - Transitional states</li>
</ul>
</section>
<section id="key-methods" class="level4">
<h4 class="anchored" data-anchor-id="key-methods">Key Methods:</h4>
<ul>
<li><code>update(dt)</code> - Updates position and state based on time delta</li>
<li><code>takeoff()</code> - Initiates gradual ascent to target height</li>
<li><code>land()</code> - Initiates gradual descent to ground</li>
<li><code>emergency()</code> - Immediately stops motors (safety feature)</li>
<li><code>send_rc_control()</code> - Accepts control values and updates velocity</li>
</ul>
<p>The <code>update()</code> method handles all physics calculations:</p>
<ul>
<li>Different behavior during takeoff/landing phases</li>
<li>Velocity-based position updates with proper trigonometry for directional movement</li>
<li>Battery drain simulation</li>
<li>Prevents clipping through the ground</li>
</ul>
</section>
</section>
<section id="flightcontroller" class="level3">
<h3 class="anchored" data-anchor-id="flightcontroller">FlightController</h3>
<p>This class processes raw controller inputs and translates them into drone commands.</p>
<section id="key-features" class="level4">
<h4 class="anchored" data-anchor-id="key-features">Key Features:</h4>
<ul>
<li>Input smoothing with <code>filter_strength</code> (0.8 = heavy smoothing)</li>
<li><code>deadband</code> (0.03) to ignore tiny accidental joystick movements</li>
<li>Speed control with <code>speed_multiplier</code> (adjustable via L1/R1 buttons)</li>
<li>Fixed rate command sending (20Hz)</li>
<li>Button edge detection (reacts to press, not hold)</li>
<li>Mapping follows “European style” (right stick for primary movement)</li>
</ul>
</section>
<section id="methods" class="level4">
<h4 class="anchored" data-anchor-id="methods">Methods:</h4>
<ul>
<li><code>process_input()</code> - Processes controller inputs with filtering</li>
<li><code>process_buttons()</code> - Handles button presses with edge detection</li>
</ul>
<p>The control flow works like this:</p>
<ol type="1">
<li>Read raw joystick values</li>
<li>Apply deadband (zero out very small inputs)</li>
<li>Apply smoothing filter</li>
<li>Convert to integer values (-100 to 100)</li>
<li>Send commands to drone at fixed intervals</li>
</ol>
</section>
</section>
<section id="dronesimulatorapp" class="level3">
<h3 class="anchored" data-anchor-id="dronesimulatorapp">DroneSimulatorApp</h3>
<p>The main application class that brings everything together. It is more or less a pygame application that takes care of the control loop and visualization. The details are not too interesting.</p>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>In Part 2 of the Tello controller navigation I will replace the simulator with my RoboMaster TT. Read on…</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/gamesir-t1d-controller/">← Previous: GameSir T1d controller &amp; pygame</a>
</div>
<div>
<a href="../../posts/tello-controller-navigation-part-2/">Next: Tello controller navigation - Part 2 →</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>pygame</category>
  <category>simulator</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/tello-controller-navigation-part-1/</guid>
  <pubDate>Tue, 06 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/tello-controller-navigation-part-1/tello-gamesir-t1d.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Interlude: GameSir T1d Python package</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/gamesir-t1d-package/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-04</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to package and publish a Python library to PyPI using the modern uv toolchain.</li>
<li>See how to wrap the GameSir T1d Bluetooth controller for use with Python and pygame.</li>
<li>Discover how to scan for your controller, connect, and read inputs using a pygame-compatible API.</li>
<li>Get practical, step-by-step instructions for project setup, dependency management, and testing.</li>
<li>Access example scripts and source code to quickly integrate the controller into your own projects.</li>
</ul>
</div>
</div>
</div>
<section id="lets-package-up-the-gamesir-t1d-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="lets-package-up-the-gamesir-t1d-wrapper">Let’s package up the Gamesir T1d wrapper</h2>
<p>For some context: this post is a tangent on this article about <a href="../../posts/gamesir-t1d-controller/">making the GameSir T1d controller work with pygame</a>.</p>
<p>I know, no one is ever going to use it apart from me. The Gamesir T1d is ancient, and the use case (using it with pygame to control a Tello) is also not very common. But I’m here to learn and try things out, and this gives me the opportunity to play with:</p>
<ul>
<li><a href="https://docs.astral.sh/uv/">uv</a>: this “new” package manager is pretty great, and I need to use it more often to get rid of old habits (pip, venv, pyenv, etc.).</li>
<li>Create a <a href="https://pypi.org/">pypi</a> package: I have never created and published a pypi package, so fun to give that a shot.</li>
<li><a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview">Claude code</a>: I have used this in the past and it seems promising, so let’s vibe-code our way to a package.</li>
</ul>
<p>But first, a logo! :P</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/gamesir-t1d-package/gamesir-t1d-pypy.png" class="img-fluid figure-img"></p>
<figcaption>GameSir T1d Python package</figcaption>
</figure>
</div>
</section>
<section id="six-steps-to-a-published-package" class="level2">
<h2 class="anchored" data-anchor-id="six-steps-to-a-published-package">Six steps to a published package</h2>
<section id="step-1-ditch-claude-code" class="level3">
<h3 class="anchored" data-anchor-id="step-1-ditch-claude-code">Step 1: Ditch Claude code</h3>
<p>It is really very easy to create a pypi package, but Claude code overcomplicated things, and in the end it got stuck. So the first step: ditch Claude code. I’m not a big fan of vibe coding (at least not today), and this confirms again why.</p>
</section>
<section id="step-2-create-a-project" class="level3">
<h3 class="anchored" data-anchor-id="step-2-create-a-project">Step 2: Create a project</h3>
<p><code>uv</code> has a built-in way to create projects we want to publish as a package, using the <code>--lib</code> switch:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--lib</span> gamesir-t1d</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> gamesir-t1d</span></code></pre></div>
<p>Next, we need to add <code>bleak</code> as a dependency:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add bleak</span></code></pre></div>
<p>For the example code to work we also need to add <code>pygame</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add pygame</span></code></pre></div>
<p>It creates the files (and virtual env) we need as a starting point:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── gamesir_t1d</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── __init__.py</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> uv.lock</span></code></pre></div>
</section>
<section id="step-3-add-modules" class="level3">
<h3 class="anchored" data-anchor-id="step-3-add-modules">Step 3: Add modules</h3>
<p>This is simply moving the code we created in the <a href="../../posts/gamesir-t1d-controller/">previous post</a> post into the right spots. Which results in:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src</span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── gamesir_t1d</span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     ├── __init__.py</span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     ├── controller.py</span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     ├── examples</span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     │&nbsp;&nbsp; └── pygame_example.py</span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── tools</span>
<span id="cb5-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>         ├── __init__.py</span>
<span id="cb5-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>         └── ble_scanner.py</span>
<span id="cb5-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> uv.lock</span></code></pre></div>
<p>Make sure the pyproject.toml has the right metadata. The latest version is here: <a href="https://github.com/pors/gamesir_t1d/blob/main/pyproject.toml">pyproject.toml</a>.</p>
<p>An interesting feature is to include scripts in a package. After installing a package you can run these scripts on the command line. This is done in the pyproject.toml as:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project.scripts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gamesir-scan = "gamesir_t1d.tools.ble_scanner:run_scanner"</span></span></code></pre></div>
<p>This is perfect for us to make the BLE scanner available, so users can figure out the name of their controller.</p>
</section>
<section id="step-4-build-and-publish" class="level3">
<h3 class="anchored" data-anchor-id="step-4-build-and-publish">Step 4: Build and publish</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> build</span></code></pre></div>
<p>This creates two files in the /dist directory:</p>
<ul>
<li>gamesir_t1d-0.1.1-py3-none-any.whl</li>
<li>gamesir_t1d-0.1.1.tar.gz</li>
</ul>
<p>which are the binary and the source version of the package.</p>
<p>Let’s publish it to <a href="https://test.pypi.org">test.pypi.org</a> first:</p>
<ol type="1">
<li>Create an account on test.pypi.org</li>
<li>Obtain an API token</li>
<li>Run this command:</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> uv publish <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--token</span> pypi-TEST_TOKEN_HERE <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--publish-url</span> https://test.pypi.org/legacy/</span></code></pre></div>
</section>
<section id="step-5-test" class="level3">
<h3 class="anchored" data-anchor-id="step-5-test">Step 5: Test</h3>
<p>To test it, we create a new project and install the package there.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init gstest</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> gstest</span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://test.pypi.org/simple/ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://pypi.org/simple gamesir-t1d</span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import gamesir_t1d; print(gamesir_t1d.__version__)"</span></span></code></pre></div>
<p>If that prints the version number, it all works!</p>
<p>Now, let’s try the scanner (make sure the controller is switched on):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> gamesir-scan</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Make</span> sure the GameSir-T1d controller is turned on and in pairing mode.</span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Typically</span> hold power button until LEDs flash rapidly<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Press</span> Enter to start scanning...</span>
<span id="cb10-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Starting</span> BLE scan for GameSir-T1d controller...</span>
<span id="cb10-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scanning</span> for BLE devices <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">timeout:</span> 3.0s<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Found</span> 14 Bluetooth devices:</span>
<span id="cb10-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.</span> Name: None, Address: E6682D99-DC5A-EE5A-9E95-DAC5BF163FC1</span>
<span id="cb10-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb10-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6.</span> Name: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401</span>
<span id="cb10-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb10-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">13.</span> Name: None, Address: 19EC6BCE-BE63-CD90-E9D6-9C91EA838008</span>
<span id="cb10-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">14.</span> Name: None, Address: 3222F9B7-2970-77BF-6814-9FB82F843839</span>
<span id="cb10-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Found</span> controller: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401</span>
<span id="cb10-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Attempting</span> to connect to Gamesir-T1d-39BD...</span>
<span id="cb10-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Successfully</span> connected to Gamesir-T1d-39BD!</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Available</span> services and characteristics:</span>
<span id="cb10-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Service:</span> 00008650-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-21">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00008651-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'write'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notify'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indicate'</span>]</span>
<span id="cb10-23">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00008655-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-24">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'write'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notify'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indicate'</span>]</span>
<span id="cb10-25">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 0000865f-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-26">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'write'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notify'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indicate'</span>]</span>
<span id="cb10-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Service:</span> 0000180a-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-28">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00002a24-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-29">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-30">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00002a25-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-31">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming you've installed the package with the [examples] extra</span></span>
<span id="cb10-33">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00002a27-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-34">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-35">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00002a26-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-36">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-37">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Characteristic:</span> 00002a50-0000-1000-8000-00805f9b34fb</span>
<span id="cb10-38">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-39"></span>
<span id="cb10-40"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Connection</span> successful. Press Ctrl+C to exit...</span></code></pre></div>
<p>Now we have the controller ID, let’s run a basic script:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gamesir_t1d <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GameSirT1dPygame</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the controller object with your controller's name</span></span>
<span id="cb11-4">controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameSirT1dPygame(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace XXXX with your controller ID</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the controller (starts BLE connection)</span></span>
<span id="cb11-7">controller.init()</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read axes and buttons using the pygame-compatible interface</span></span>
<span id="cb11-10">left_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Range: -1.0 to 1.0</span></span>
<span id="cb11-11">left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Range: -1.0 to 1.0</span></span>
<span id="cb11-12">a_button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_button(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 for pressed, 0 for not pressed</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the controller is connected</span></span>
<span id="cb11-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> controller.is_connected():</span>
<span id="cb11-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Controller is connected!"</span>)</span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean up when done</span></span>
<span id="cb11-19">controller.quit()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb12-1">Scanning for Gamesir-T1d-39BD...</span>
<span id="cb12-2">Found Gamesir-T1d-39BD at FDF00BC3-1DEE-1525-0B34-7E2D3391C401</span>
<span id="cb12-3">Connecting...</span>
<span id="cb12-4">Connected!</span>
<span id="cb12-5">Controller is connected!</span></code></pre></div>
</div>
</section>
<section id="step-6-publish-for-real" class="level3">
<h3 class="anchored" data-anchor-id="step-6-publish-for-real">Step 6: Publish for real!</h3>
<p>It all seems to work, so now we can publish the package on pypi.org! Again, create an account and generate an API token first, then:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> publish <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--token</span> pypi-YourToken</span></code></pre></div>
<p>And there we have it, our package: <a href="https://pypi.org/project/gamesir-t1d/">pypi.org/project/gamesir-t1d/</a>!</p>
<p>We repeat the same steps as before for testing:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init gstest2</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> gstest2</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add gamesir-t1d</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import gamesir_t1d; print(gamesir_t1d.__version__)"</span></span></code></pre></div>
<p>No need to run the scanner, the controller ID is still what is was :)</p>
<p>Now, run the examples included in the package:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gamesir_t1d.examples.pygame_example <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_without_pygame</span>
<span id="cb15-2"></span>
<span id="cb15-3">test_without_pygame(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-XXXX"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace XXXX with your controller ID</span></span></code></pre></div>
<p>and</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gamesir_t1d.examples <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> run</span>
<span id="cb16-2"></span>
<span id="cb16-3">run(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-XXXX"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace XXXX with your controller ID</span></span></code></pre></div>
<p>This will run the test as shown in this <a href="https://www.youtube.com/watch?v=7sMoOxHOOcM">video</a>.</p>
<p>The source code can be found <a href="https://github.com/pors/gamesir_t1d">here</a>.</p>
</section>
</section>
<section id="wrapping-it-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-it-up">Wrapping it up!</h2>
<p>Haha, dad joke there.</p>
<p>There is nothing to wrap up anyway.</p>
<p>If you are interested in reading more about drones, coding, and machine learning (soon), start here: <a href="../../series/index.html">Code, Fly &amp; AI</a>.</p>


</section>

 ]]></description>
  <category>pygame</category>
  <category>code</category>
  <category>open-source</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/gamesir-t1d-package/</guid>
  <pubDate>Sat, 03 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/gamesir-t1d-package/gamesir-t1d-pypy.png" medium="image" type="image/png" height="122" width="144"/>
</item>
<item>
  <title>GameSir T1d controller &amp; pygame</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/gamesir-t1d-controller/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-02</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Connect a GameSir T1d controller to your computer via Bluetooth using a BLE hacking approach (the controller normally only works with the Tello app)</li>
<li>Parse controller input data for all buttons, joysticks, and triggers using Python and bleak</li>
<li>Create a pygame-compatible wrapper that lets you use the controller in any Python application</li>
<li>Control your Tello drone with precise analog joysticks instead of keyboard keys</li>
<li>Complete working code provided with step-by-step explanation of the controller hacking process</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/key-navigation-video-snapshots/">← Previous: Key navigation &amp; video snapshots</a>
</div>
<div>
<a href="../../posts/tello-controller-navigation-part-1/">Next: Tello controller navigation - Part 1 →</a>
</div>
</div>
</div>
</div>
</div>
<p>Controlling a drone with a keyboard is not great, neither is using the touch-screen of a phone. That’s why I bought the recommended controller for the Tello: the <a href="https://www.manualpdf.in/dji/tello-gamesir-t1d/manual">GameSir T1d</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/gamesir-t1d-controller/GameSir-T1d.png" class="img-fluid figure-img"></p>
<figcaption>GameSir T1d controller</figcaption>
</figure>
</div>
<section id="hook-up-the-gamesir-t1d" class="level2">
<h2 class="anchored" data-anchor-id="hook-up-the-gamesir-t1d">Hook up the GameSir T1d</h2>
<p>Initially this seemed like a no-brainer, and I was surprised why no-one else hadn’t done it yet: replace the keyboard strokes with signals from the GameSir T1d controller. It turns out that this controller was specifically modified to connect ONLY through the Tello app.</p>
<p>Normally the code below is enough to connect to a game controller from a python script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb1-2"></span>
<span id="cb1-3">pygame.init()</span>
<span id="cb1-4">pygame.joystick.init()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for connected controllers</span></span>
<span id="cb1-7">joystick_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.joystick.get_count()</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> joystick_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No controller detected. Please connect your GameSir T1d controller."</span>)</span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the first controller detected</span></span>
<span id="cb1-14">joystick <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.joystick.Joystick(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-15">joystick.init()</span></code></pre></div>
<p>In our case the output was:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">No controller detected. Please connect your GameSir T1d controller.</span></code></pre></div>
<p>Oh oh, problem!</p>
</section>
<section id="hack-it" class="level2">
<h2 class="anchored" data-anchor-id="hack-it">Hack it!</h2>
<p>After some searching and LLM’ing it became clear that there <em>is</em> a way to make it work.</p>
<p><strong>Pfew!</strong></p>
<p>For Internet historians, here is the evolution of the hack:</p>
<ol type="1">
<li><a href="https://cloud.tencent.com/developer/article/1756298">original Python 2 script</a></li>
<li><a href="https://github.com/Diallomm/hack_GamesirT1d/tree/main">ported to Python 3</a></li>
<li><a href="https://gist.github.com/ElishaAz/a83dfa8f2d53497d7d1d0bca03bfced2">using bleak</a></li>
<li><a href="https://gist.github.com/Cacti-Master/89f0f397a13f28ada046ec42477bc9fd">refactor</a></li>
</ol>
</section>
<section id="gamesir-t1d-hack-version-5" class="level2">
<h2 class="anchored" data-anchor-id="gamesir-t1d-hack-version-5">GameSir T1D hack version 5</h2>
<p>I’m honored to step in the footsteps of these four hackers and try to get iteration five to work!</p>
<p>First we need to get the controller to connect. Simply pairing via Bluetooth won’t work.</p>
<p>The GameSir T1d gets into pairing mode by simply powering it on. The four blue power LEDs start blinking when trying to connect. At that state we run the script below (on github: <a href="https://github.com/pors/tello-play/blob/main/gamesirT1d-connect.py">gamesirT1d-connect.py</a>).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a tiny button labeled <code>pair</code> above another tiny button labeled <code>C1</code>. This <code>pair</code> button can be used to pair a new device (great UX!). Clicking it while connected, will cause the Bluetooth connection to be dropped. So don’t click it while controlling a drone!</p>
</div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">BLE Controller Connection Preview</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Full script</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Output</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name our controller should broadcast as</span></span>
<span id="cb3-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d"</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting BLE scan for GameSir-T1d controller..."</span>)</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name our controller should broadcast as</span></span>
<span id="cb4-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d"</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb4-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting BLE scan for GameSir-T1d controller..."</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First, scan for all available BLE devices</span></span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scanning for BLE devices..."</span>)</span>
<span id="cb4-12">    devices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> BleakScanner.discover()</span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print all found devices to help with debugging</span></span>
<span id="cb4-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(devices)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Bluetooth devices:"</span>)</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, device <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(devices):</span>
<span id="cb4-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Address: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-18"></span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to find our controller</span></span>
<span id="cb4-20">    target_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> device <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> devices:</span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> device.name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> CONTROLLER_NAME.lower() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> device.name.lower():</span>
<span id="cb4-23">            target_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb4-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found controller: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Address: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-26"></span>
<span id="cb4-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> target_device:</span>
<span id="cb4-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"No device found with name containing '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb4-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Is the controller turned on and in pairing mode?"</span>)</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-31"></span>
<span id="cb4-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to connect to the controller</span></span>
<span id="cb4-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempting to connect to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb4-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> BleakClient(target_device.address, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> client:</span>
<span id="cb4-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> client.is_connected:</span>
<span id="cb4-37">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully connected to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span>)</span>
<span id="cb4-38"></span>
<span id="cb4-39">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List available services and characteristics</span></span>
<span id="cb4-40">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Available services and characteristics:"</span>)</span>
<span id="cb4-41">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> service <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> client.services:</span>
<span id="cb4-42">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Service: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-43">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> service.characteristics:</span>
<span id="cb4-44">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Characteristic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>char<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-45">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"    Properties: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>char<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>properties<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-46"></span>
<span id="cb4-47">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a moment so we can see the connection is established</span></span>
<span id="cb4-48">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Connection successful. Press Ctrl+C to exit..."</span>)</span>
<span id="cb4-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-51">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to connect"</span>)</span>
<span id="cb4-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error connecting to device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-54"></span>
<span id="cb4-55"></span>
<span id="cb4-56"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure controller is in pairing mode before running this</span></span>
<span id="cb4-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make sure the GameSir-T1d controller is turned on and in pairing mode."</span>)</span>
<span id="cb4-59">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Typically hold power button until LEDs flash rapidly)"</span>)</span>
<span id="cb4-60">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Enter to start scanning..."</span>)</span>
<span id="cb4-61"></span>
<span id="cb4-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the async main function</span></span>
<span id="cb4-63">    asyncio.run(main())</span></code></pre></div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<pre class="text"><code>Make sure the GameSir-T1d controller is turned on and in pairing mode.
(Typically hold power button until LEDs flash rapidly)
Press Enter to start scanning...
Starting BLE scan for GameSir-T1d controller...
Scanning for BLE devices...
Found 11 Bluetooth devices:
1. Name: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401
2. Name: None, Address: 3A2C8191-D3F5-F471-BC81-75AFE2DB0D60
3. Name: None, Address: 772F5433-AAE9-D456-209C-DEA32D192E10
...
11. Name: None, Address: 80334171-1943-B3DE-7DDD-773753B852C3
Found controller: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401
Attempting to connect to Gamesir-T1d-39BD...
Successfully connected to Gamesir-T1d-39BD!

Available services and characteristics:
Service: 00008650-0000-1000-8000-00805f9b34fb
  Characteristic: 00008651-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
  Characteristic: 00008655-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
  Characteristic: 0000865f-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
Service: 0000180a-0000-1000-8000-00805f9b34fb
  Characteristic: 00002a24-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a25-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a27-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a26-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a50-0000-1000-8000-00805f9b34fb
    Properties: ['read']

Connection successful. Press Ctrl+C to exit...</code></pre>
</div>
</div>
</div>
<p>If you have inspected the output tab, you see we succeeded! Yay, let’s move on.</p>
</section>
<section id="read-the-t1d-controller-state" class="level2">
<h2 class="anchored" data-anchor-id="read-the-t1d-controller-state">Read the T1d controller state</h2>
<p>Now the controller is connected to the computer, let’s see if we can read joystick and button changes.</p>
<p>There’s a heap of input elements that need to be read and made compatible with gamepy:</p>
<ul>
<li>Both joysticks (LX, LY, RX, RY)</li>
<li>Analog triggers (L2, R2)</li>
<li>Buttons (A, B, X, Y, L1, R1, C1, C2, Menu)</li>
<li>D-pad (Up, Down, Left, Right)</li>
</ul>
<p>The script below prints the real-time value of each of these inputs while using the controller (on github: <a href="https://github.com/pors/tello-play/blob/main/gamesirT1d-read.py">gamesirT1d-read.py</a>).</p>
<p>From here on we don’t need to pair the controller, we just use the device name that was identified in the previous step.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Read Controller State Preview</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Full script</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Output</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The exact name our controller showed up as</span></span>
<span id="cb6-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The characteristic we want to read</span></span>
<span id="cb6-7">CHARACTERISTIC_UUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00008651-0000-1000-8000-00805f9b34fb"</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameSirT1d:</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The exact name our controller showed up as</span></span>
<span id="cb7-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The characteristic we want to read</span></span>
<span id="cb7-7">CHARACTERISTIC_UUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00008651-0000-1000-8000-00805f9b34fb"</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameSirT1d:</span>
<span id="cb7-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Joystick values (0-1023, with 512 as center)</span></span>
<span id="cb7-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-16">        </span>
<span id="cb7-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analog triggers (0-255)</span></span>
<span id="cb7-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-20">        </span>
<span id="cb7-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Digital buttons (0 or 1)</span></span>
<span id="cb7-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.menu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-31">        </span>
<span id="cb7-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D-pad</span></span>
<span id="cb7-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-37">        </span>
<span id="cb7-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connection state</span></span>
<span id="cb7-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-41">    </span>
<span id="cb7-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb7-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Parse the raw data from the controller"""</span></span>
<span id="cb7-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:</span>
<span id="cb7-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-46">        </span>
<span id="cb7-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse joysticks</span></span>
<span id="cb7-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x3f</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb7-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))</span>
<span id="cb7-52">        </span>
<span id="cb7-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse triggers</span></span>
<span id="cb7-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb7-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb7-56">        </span>
<span id="cb7-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse buttons from byte 9</span></span>
<span id="cb7-58">        buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb7-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x01</span>))</span>
<span id="cb7-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x02</span>))</span>
<span id="cb7-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.menu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x04</span>))</span>
<span id="cb7-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x08</span>))</span>
<span id="cb7-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span>))</span>
<span id="cb7-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x40</span>))</span>
<span id="cb7-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x80</span>))</span>
<span id="cb7-66">        </span>
<span id="cb7-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse more buttons from byte 10</span></span>
<span id="cb7-68">        buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb7-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x04</span>))</span>
<span id="cb7-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x08</span>))</span>
<span id="cb7-71">        </span>
<span id="cb7-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse D-pad from byte 11</span></span>
<span id="cb7-73">        dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>]</span>
<span id="cb7-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x01</span>)</span>
<span id="cb7-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x03</span>)</span>
<span id="cb7-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x05</span>)</span>
<span id="cb7-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x07</span>)</span>
<span id="cb7-78">        </span>
<span id="cb7-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-80">    </span>
<span id="cb7-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a string representation of the controller state"""</span></span>
<span id="cb7-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (</span>
<span id="cb7-84">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Joysticks: LX=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>lx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, LY=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ly<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, RX=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>rx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, RY=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ry<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-85">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Triggers: L2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, R2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-86">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Buttons: A=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, B=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, X=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, "</span></span>
<span id="cb7-87">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"L1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, R1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, C1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>c1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, C2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>c2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Menu=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>menu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-88">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"D-pad: Up=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_up<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Down=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_down<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Left=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_left<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Right=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_right<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-89">        )</span>
<span id="cb7-90">    </span>
<span id="cb7-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add methods to get normalized values (-1.0 to 1.0) for joysticks</span></span>
<span id="cb7-92">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_left_stick(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get normalized values for left stick (-1.0 to 1.0)"""</span></span>
<span id="cb7-94">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-95">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x, y)</span>
<span id="cb7-97">    </span>
<span id="cb7-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_right_stick(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get normalized values for right stick (-1.0 to 1.0)"""</span></span>
<span id="cb7-100">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-101">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x, y)</span>
<span id="cb7-103"></span>
<span id="cb7-104"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb7-105">    controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameSirT1d()</span>
<span id="cb7-106">    </span>
<span id="cb7-107">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scanning for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb7-108">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> BleakScanner.find_device_by_name(CONTROLLER_NAME)</span>
<span id="cb7-109">    </span>
<span id="cb7-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> device:</span>
<span id="cb7-111">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Could not find </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Is it turned on?"</span>)</span>
<span id="cb7-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb7-113">    </span>
<span id="cb7-114">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> at </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-115">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting..."</span>)</span>
<span id="cb7-116">    </span>
<span id="cb7-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> BleakClient(device.address) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> client:</span>
<span id="cb7-119">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connected!"</span>)</span>
<span id="cb7-120">            controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-121">            controller._client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client</span>
<span id="cb7-122">            </span>
<span id="cb7-123">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-124">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> controller.connected:</span>
<span id="cb7-125">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read current state</span></span>
<span id="cb7-126">                    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.read_gatt_char(CHARACTERISTIC_UUID)</span>
<span id="cb7-127">                    </span>
<span id="cb7-128">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the data</span></span>
<span id="cb7-129">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> controller.parse_data(data):</span>
<span id="cb7-130">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get normalized stick values for easier use</span></span>
<span id="cb7-131">                        left_x, left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_left_stick()</span>
<span id="cb7-132">                        right_x, right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_right_stick()</span>
<span id="cb7-133">                        </span>
<span id="cb7-134">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the line and print current state</span></span>
<span id="cb7-135">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Left: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>left_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>left_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) Right: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>right_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>right_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | "</span></span>
<span id="cb7-136">                              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> B:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> X:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Y:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span></span>
<span id="cb7-137">                              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"L1:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> R1:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> L2:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> R2:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-138">                    </span>
<span id="cb7-139">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a bit before next reading</span></span>
<span id="cb7-140">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20Hz polling rate</span></span>
<span id="cb7-141">                    </span>
<span id="cb7-142">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardInterrupt</span>:</span>
<span id="cb7-143">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Stopping..."</span>)</span>
<span id="cb7-144">                controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-145">    </span>
<span id="cb7-146">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb7-147">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-148">        controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-149"></span>
<span id="cb7-150"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-151">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GameSir T1d Controller Test"</span>)</span>
<span id="cb7-152">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move joysticks and press buttons to see values"</span>)</span>
<span id="cb7-153">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Ctrl+C to exit"</span>)</span>
<span id="cb7-154">    </span>
<span id="cb7-155">    asyncio.run(main())</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb8-1">GameSir T1d Controller Test</span>
<span id="cb8-2">Move joysticks and press buttons to see values</span>
<span id="cb8-3">Press Ctrl+C to exit</span>
<span id="cb8-4">Scanning for Gamesir-T1d-39BD...</span>
<span id="cb8-5">Found Gamesir-T1d-39BD at FDF00BC3-1DEE-1525-0B34-7E2D3391C401</span>
<span id="cb8-6">Connecting...</span>
<span id="cb8-7">Connected!</span>
<span id="cb8-8">Left: (0.05, 0.03) Right: (-0.10, -0.13) | A:1 B:0 X:0 Y:0 L1:0 R1:0 L2:3 R2:155</span></code></pre></div>
</div>
</div>
</div>
<p>That seems to work pretty good! Now we can move on and create a wrapper that behaves as if it was part of a gamepy compatible controller.</p>
</section>
<section id="gamesir-t1d-pygame-compatible-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="gamesir-t1d-pygame-compatible-wrapper">GameSir T1d Pygame-Compatible Wrapper</h2>
<p>The wrapper functions as a bridge between two worlds:</p>
<ol type="1">
<li>The BLE communication layer that talks directly to our GameSir T1d</li>
<li>A pygame-compatible interface that provides familiar methods like get_axis() and get_button()</li>
</ol>
<p>This allows our drone control code to interact with the controller as if it were a standard pygame joystick, while the BLE communication happens behind the scenes.</p>
<p>The wrapper code consists of two classes:</p>
<ol type="1">
<li>GameSirT1d: this class parses the raw inputs from the controller and converts it to the format and ranges we expect in a pygame controller.</li>
<li>GameSirT1dPygame: this class implements the BLE interface and provides the pygame compatible wrapper.</li>
</ol>
<p>The code can be found here: <a href="https://github.com/pors/tello-play/blob/main/gamesir_t1d_pygame.py">gamesir_t1d_pygame.py</a>.</p>
</section>
<section id="lets-try-it-out" class="level2">
<h2 class="anchored" data-anchor-id="lets-try-it-out">Let’s try it out!</h2>
<p>With this little example script we can see if the controller (at least the thumpsticks) does what we expect:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gamesir_t1d_pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GameSirT1dPygame</span>
<span id="cb9-3"></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(controller_name):</span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize pygame for window and graphics</span></span>
<span id="cb9-7">    pygame.init()</span>
<span id="cb9-8">    screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>))</span>
<span id="cb9-9">    pygame.display.set_caption(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GameSir T1d Test"</span>)</span>
<span id="cb9-10">    clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize our custom controller</span></span>
<span id="cb9-13">    controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameSirT1dPygame(controller_name)</span>
<span id="cb9-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting to controller..."</span>)</span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> controller.init():</span>
<span id="cb9-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to connect to controller"</span>)</span>
<span id="cb9-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb9-18"></span>
<span id="cb9-19">    running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> running:</span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process pygame events</span></span>
<span id="cb9-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb9-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT:</span>
<span id="cb9-24">                running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb9-25"></span>
<span id="cb9-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read joystick values</span></span>
<span id="cb9-27">        left_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-28">        left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-29">        right_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-30">        right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-31"></span>
<span id="cb9-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear screen</span></span>
<span id="cb9-33">        screen.fill((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb9-34"></span>
<span id="cb9-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw joystick positions</span></span>
<span id="cb9-36">        pygame.draw.circle(</span>
<span id="cb9-37">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-38">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left stick background</span></span>
<span id="cb9-39">        pygame.draw.circle(</span>
<span id="cb9-40">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(left_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb9-41">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left stick position</span></span>
<span id="cb9-42"></span>
<span id="cb9-43">        pygame.draw.circle(</span>
<span id="cb9-44">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-45">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right stick background</span></span>
<span id="cb9-46">        pygame.draw.circle(</span>
<span id="cb9-47">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(right_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb9-48">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right stick position</span></span>
<span id="cb9-49"></span>
<span id="cb9-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update display</span></span>
<span id="cb9-51">        pygame.display.flip()</span>
<span id="cb9-52"></span>
<span id="cb9-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Control frame rate</span></span>
<span id="cb9-54">        clock.tick(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb9-55"></span>
<span id="cb9-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean up</span></span>
<span id="cb9-57">    controller.quit()</span>
<span id="cb9-58">    pygame.quit()</span>
<span id="cb9-59"></span>
<span id="cb9-60"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb9-61">    main(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace with the name of your T1d</span></span></code></pre></div>
<p>Look at that! Pretty responsive!</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/7sMoOxHOOcM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>Now that we have the T1d working with pygame we can implement the interface with the Tello. Read on…</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/key-navigation-video-snapshots/">← Previous: Key navigation &amp; video snapshots</a>
</div>
<div>
<a href="../../posts/tello-controller-navigation-part-1/">Next: Tello controller navigation - Part 1 →</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>pygame</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/gamesir-t1d-controller/</guid>
  <pubDate>Thu, 01 May 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/gamesir-t1d-controller/GameSir-T1d.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Key navigation &amp; Video snapshots</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/key-navigation-video-snapshots/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-27</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to control a Tello drone using keyboard navigation with responsive, event-based controls in Python (via pygame).</li>
<li>Understand why velocity-based commands and fixed frame-rate updates create smoother, more natural drone movement.</li>
<li>See how to stream live video from the drone, process frames, and overlay status info (like battery level).</li>
<li>Get step-by-step instructions to add a keyboard shortcut for saving video snapshots directly from the drone feed.</li>
<li>Discover practical tips for reliable streaming and why naive command loops don’t work well for real-time control.</li>
<li>Preview what’s next: moving from keyboard to game controller navigation for even better piloting.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/crash-the-tello/">← Previous: Crash the Tello</a>
</div>
<div>
<a href="../../posts/gamesir-t1d-controller/">Next: GameSir T1d &amp; pygame →</a>
</div>
</div>
</div>
</div>
</div>
<section id="keyboard-navigation" class="level2">
<h2 class="anchored" data-anchor-id="keyboard-navigation">Keyboard navigation</h2>
<p>Now that we can control the TT with code, let’s extend that to a human in the ground-bound pilot seat. The most simple approach is to use specific keyboard strokes to map to drone navigation commands.</p>
<p>Keyboard navigation is implemented as an example in the DJSTelloPy repo: <a href="https://github.com/damiafuentes/DJITelloPy/blob/master/examples/manual-control-pygame.py">manual-control-pygame.py</a>. This is quite a cool piece of code. It uses pygame, which I never used before, so lets go through some of the interesting parts of the code.</p>
<section id="the-secret-sauce-event-based-controls" class="level3">
<h3 class="anchored" data-anchor-id="the-secret-sauce-event-based-controls">The secret sauce: Event-based controls</h3>
<p>The example uses pygame’s event system rather than simple polling, and this creates nice and responsive controls.</p>
<div id="8d77cf63" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a timer that triggers events at the specified frame rate</span></span>
<span id="cb1-2">pygame.time.set_timer(pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> FPS)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In the main loop, process all pending events</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN:</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keydown(event.key)</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYUP:</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keyup(event.key)</span></code></pre></div>
</div>
<p>Instead of constantly checking “is this key pressed?” in a loop, the code waits for pygame to tell it when keys are pressed or released. This means:</p>
<ol type="1">
<li>no missed keypresses, even if they happen very quickly</li>
<li>immediate detection of key events</li>
<li>clear separation between “key is pressed” and “key is released” logic</li>
</ol>
<p>Pretty cool.</p>
</section>
<section id="smooth-flying-with-velocity-controls" class="level3">
<h3 class="anchored" data-anchor-id="smooth-flying-with-velocity-controls">Smooth flying with velocity controls</h3>
<p>Another interesting bit from the example code is how smoothly it makes the drone fly. This is done through velocity-based control (not up, down, left etc. commands).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize velocity variables</span></span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward/backward</span></span>
<span id="cb2-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left/right</span></span>
<span id="cb2-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Up/down</span></span>
<span id="cb2-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotation</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When UP arrow is pressed</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keydown(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP:</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set to speed value (60)</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...other keys...</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When UP arrow is released</span></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keyup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_DOWN:</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop movement</span></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...other keys...</span></span></code></pre></div>
<p>Instead of sending a “move forward” command when we press UP, it sets a forward velocity that remains until we release the key. This creates a very natural movement, especially when:</p>
<ul>
<li>moving diagonally (pressing UP and RIGHT simultaneously)</li>
<li>transitioning between movements (release UP while still holding RIGHT)</li>
<li>making subtle adjustments to flight path</li>
</ul>
</section>
<section id="the-heartbeat-why-frame-rate-matters" class="level3">
<h3 class="anchored" data-anchor-id="the-heartbeat-why-frame-rate-matters">The Heartbeat: Why frame rate matters</h3>
<p>Something that reminds me of my hardware/telco days: the pygame library work synchronously with fixed time intervals. This line sets the heartbeat:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pygame.time.set_timer(pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> FPS)</span></code></pre></div>
<p>Basically at each interval it listens for user events and handles them as needed. At 120 FPS, it generates an event every 8.3 milliseconds, triggering e.g.&nbsp;our update function:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control:</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.send_rc_control(</span>
<span id="cb4-4">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity,</span>
<span id="cb4-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity,</span>
<span id="cb4-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity, </span>
<span id="cb4-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity</span>
<span id="cb4-8">        )</span></code></pre></div>
</section>
<section id="why-not-send-commands-immediately" class="level3">
<h3 class="anchored" data-anchor-id="why-not-send-commands-immediately">Why not send commands immediately?</h3>
<p>The naive alternative is to have a <code>while True:</code> loop that reads key strokes and react to that instantly. What’s wrong with that?</p>
<ol type="1">
<li><strong>Command Rate Control</strong>: Drones can get overwhelmed if we send too many commands too quickly</li>
<li><strong>Command Combination</strong>: If we press multiple keys in one frame, they’re combined into a single efficient command</li>
<li><strong>Smooth Motion</strong>: Even, regular command timing creates more natural drone movement</li>
</ol>
<p>I tried the <code>while True</code> approach and it doesn’t work that great. There is no feel between pressing keys and the drone following up on that.</p>
<p>So, I learned something new: <code>pygame</code>, which I’m sure will come in handy soon (spoiler alert: after this I want to use the GameSire controller to fly the Tello. Guess which library is great to speak to gaming consoles!).</p>
</section>
</section>
<section id="video-streaming-snapshots" class="level2">
<h2 class="anchored" data-anchor-id="video-streaming-snapshots">Video streaming &amp; snapshots</h2>
<p>There is no autonomous flying without vision, and now is the first time we can have a peek at streaming video and capturing it.</p>
<p>The same example from above contains the video streaming as well.</p>
<section id="video-streaming" class="level3">
<h3 class="anchored" data-anchor-id="video-streaming">Video streaming</h3>
<section id="setting-up-the-stream" class="level4">
<h4 class="anchored" data-anchor-id="setting-up-the-stream">Setting Up the Stream</h4>
<p>First, the code initializes the video stream:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure streaming is off before we start</span></span>
<span id="cb5-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamoff()</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then turn streaming on</span></span>
<span id="cb5-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamon()</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the object that will give us frames</span></span>
<span id="cb5-7">frame_read <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_frame_read()</span></code></pre></div>
<p>This pattern of turning streaming off then on again is a good practice to ensure we’re starting with a clean slate. I had it hang a couple of times before applying this trick.</p>
</section>
<section id="capturing-and-processing-frames" class="level4">
<h4 class="anchored" data-anchor-id="capturing-and-processing-frames">Capturing and processing frames</h4>
<p>In the main loop, the code grabs frames from the drone and processes them:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the latest frame</span></span>
<span id="cb6-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frame_read.frame</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add battery information to the frame</span></span>
<span id="cb6-5">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Battery: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_battery())</span>
<span id="cb6-6">cv2.putText(frame, text, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">720</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb6-7">    cv2.FONT_HERSHEY_SIMPLEX, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<p>This overlays the battery percentage in red text at the bottom left of the frame. A handy feature when we’re flying!</p>
</section>
<section id="frame-transformation" class="level4">
<h4 class="anchored" data-anchor-id="frame-transformation">Frame transformation</h4>
<p>The next three lines are needed for displaying the frame correctly in pygame:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OpenCV uses BGR, pygame needs RGB</span></span>
<span id="cb7-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate the frame 90 degrees</span></span>
<span id="cb7-5">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.rot90(frame)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flip the frame upside down</span></span>
<span id="cb7-8">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.flipud(frame)</span></code></pre></div>
<p>Why all this transformation? Cameras often capture images in orientations or color formats that aren’t immediately displayable. OpenCV uses BGR color format while pygame expects RGB, and the Tello camera orientation needs adjusting to appear correctly on screen.</p>
</section>
<section id="displaying-in-pygame" class="level4">
<h4 class="anchored" data-anchor-id="displaying-in-pygame">Displaying in pygame</h4>
<p>Finally, the frame is displayed in the pygame window:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert numpy array to a pygame surface</span></span>
<span id="cb8-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.surfarray.make_surface(frame)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the surface to the screen</span></span>
<span id="cb8-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(frame, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the display</span></span>
<span id="cb8-8">pygame.display.update()</span></code></pre></div>
<p>This process happens every frame (120 times per second with the default settings), creating a smooth video feed.</p>
</section>
</section>
<section id="video-snapshots" class="level3">
<h3 class="anchored" data-anchor-id="video-snapshots">Video snapshots</h3>
<p>Not included in the example code is the ability to take a snapshot by pressing a key and saving the current frame to disk.</p>
<p>So let’s add it:</p>
<section id="first-add-the-necessary-import" class="level4">
<h4 class="anchored" data-anchor-id="first-add-the-necessary-import">1. First, add the necessary import</h4>
<p>At the top of the file, make sure we have:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</section>
<section id="create-a-directory-to-store-images" class="level4">
<h4 class="anchored" data-anchor-id="create-a-directory-to-store-images">2. Create a directory to store images</h4>
<p>Add this near the beginning of our <code>__init__</code> method:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store images if it doesn't exist</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tello_images'</span>):</span>
<span id="cb10-3">    os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tello_images'</span>)</span></code></pre></div>
</section>
<section id="add-a-key-handler-for-taking-snapshots" class="level4">
<h4 class="anchored" data-anchor-id="add-a-key-handler-for-taking-snapshots">3. Add a key handler for taking snapshots</h4>
<p>In the <code>keyup</code> method, add a case for a new key (I’ll use ‘p’ for “picture”):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keyup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Update velocities based on key released """</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_DOWN:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero forward/backward velocity</span></span>
<span id="cb11-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_LEFT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_RIGHT:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero left/right velocity</span></span>
<span id="cb11-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_s:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero up/down velocity</span></span>
<span id="cb11-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_d:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero yaw velocity</span></span>
<span id="cb11-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_t:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># takeoff</span></span>
<span id="cb11-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.takeoff()</span>
<span id="cb11-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_l:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># land</span></span>
<span id="cb11-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.land()</span>
<span id="cb11-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_p:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take a snapshot</span></span>
<span id="cb11-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.take_snapshot()</span></code></pre></div>
</section>
<section id="add-the-snapshot-method" class="level4">
<h4 class="anchored" data-anchor-id="add-the-snapshot-method">4. Add the snapshot method</h4>
<p>Add this new method to our <code>FrontEnd</code> class:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> take_snapshot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Take a snapshot of the current frame and save it to disk</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the current frame</span></span>
<span id="cb12-6">    frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_frame_read().frame</span>
<span id="cb12-7">    </span>
<span id="cb12-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> frame <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a filename with timestamp</span></span>
<span id="cb12-10">        timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-%H%M%S"</span>)</span>
<span id="cb12-11">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tello_images/tello_snapshot_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.jpg"</span></span>
<span id="cb12-12">        </span>
<span id="cb12-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the image - note we save the original frame before any transformations</span></span>
<span id="cb12-14">        cv2.imwrite(filename, frame)</span>
<span id="cb12-15">        </span>
<span id="cb12-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Snapshot saved: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>The resulting code can be found <a href="https://github.com/pors/tello-play/blob/main/manual-control-pygame.py">here</a>.</p>
</section>
</section>
<section id="lets-try-it-out" class="level3">
<h3 class="anchored" data-anchor-id="lets-try-it-out">Let’s try it out!</h3>
<p>It all works just fine, here are some low res snapshots I made:</p>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142617.967533.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142635.818627.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142638.978236.jpg" class="img-fluid" width="250"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142643.129198.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142653.1736279.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142683.295296.jpg" class="img-fluid" width="250"></p>
</div>
</div>
</div>
<p>Navigating with a keyboard is a disaster, so….</p>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>To improve navigation we are going to hook up the GameSir T1d, <a href="../../posts/gamesir-t1d-controller/">read on..</a>.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/crash-the-tello/">← Previous: Crash the Tello</a>
</div>
<div>
<a href="../../posts/gamesir-t1d-controller/">Next: GameSir T1d &amp; pygame →</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>pygame</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/key-navigation-video-snapshots/</guid>
  <pubDate>Sat, 26 Apr 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots.png" medium="image" type="image/png" height="91" width="144"/>
</item>
<item>
  <title>Interlude: I’m a Pilot!</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/i-am-a-pilot/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-25</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Passed the EASA A1/A3 pilot exam, officially becoming a UAV (drone) pilot—childhood dream “fulfilled.”</li>
<li>Created a web-based EASA exam practice app to prep for the test, available online for free.</li>
<li>Shared app’s source code on GitHub for community use.</li>
</ul>
</div>
</div>
</div>
<section id="fulfilling-a-dream" class="level2">
<h2 class="anchored" data-anchor-id="fulfilling-a-dream">Fulfilling a dream</h2>
<p>As a kid I always wanted to be a pilot (not true, it just makes for a more interesting story), and now I just passed the EASA A1/A3 pilot exam!</p>
<p>Yeah, I know, this is a certification for UAV’s. UAV stands for Unmanned Aerial Vehicle, where you as a pilot stay on the ground. We can’t have it all.</p>
<p>I will need this certification to fly drones outdoors, even the tiny Tello requires the ground-bound pilot to have the authorization to fly drones.</p>
</section>
<section id="easa-a1a3-exam-practice-app" class="level2">
<h2 class="anchored" data-anchor-id="easa-a1a3-exam-practice-app">EASA A1/A3 Exam Practice App</h2>
<p>Anyway, to help me study, I (Claude.ai) created a practice app to go over all possible questions for the exam. I thought it might be handy for others so I put it up online here: <a href="https://dronelab.dev/easa-exam/">EASA A1/A3 exam test app</a>. The source code is <a href="https://github.com/pors/EASA-exam-practice">here</a>.</p>
<p><small>Beware: the source PDF with questions was used as the basis for the app, and the LLM made some mistakes. I think I have corrected most/all of them, but if you want to be sure please double check.</small></p>


</section>

 ]]></description>
  <category>drone</category>
  <category>open-source</category>
  <guid>https://dronelab.dev/posts/i-am-a-pilot/</guid>
  <pubDate>Thu, 24 Apr 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/i-am-a-pilot/pilot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Crash the Tello (with and without code)</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/crash-the-tello/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-24</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Unboxed and crashed a DJI Tello drone — first due to a buggy phone app, then because of the infamous “ceiling effect.”</li>
<li>Recommend using TelloFPV app and GameSir T1d controller for smoother manual flight experiences.</li>
<li>Explained basic drone movements clearly (throttle, yaw, pitch, roll).</li>
<li>Introduced DJI’s Python SDK for coding drone flight, setting the stage for further explorations with code.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/enter-the-tello/">← Previous: Enter the Tello</a>
</div>
<div>
<a href="../../posts/key-navigation-video-snapshots/">Next: Key navigation &amp; Video snapshots →</a>
</div>
</div>
</div>
</div>
</div>
<section id="unboxed" class="level2">
<h2 class="anchored" data-anchor-id="unboxed">Unboxed</h2>
<p>Now that the drone is out of the box, we’re gonna take it for a spin (and yes it crashed). First with the phone app, then with code.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/crash-the-tello/crashed-TT.png" class="img-fluid figure-img"></p>
<figcaption>Crashed RoboMaster TT (generated by ChatGPT)</figcaption>
</figure>
</div>
<p><br></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These blog posts are intended to be read in order. If you want to follow along on my journey, start here: <a href="../../posts/enter-the-tello/">Enter the Tello</a>. Or ignore this and keep on reading below.</p>
</div>
</div>
</section>
<section id="first-tt-flight" class="level2">
<h2 class="anchored" data-anchor-id="first-tt-flight">First TT flight</h2>
<p>To fly a drone for the first time it is good to have a basic understanding how these quadcopters work, and what the basic movements are:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 79%">
</colgroup>
<thead>
<tr class="header">
<th>Movement</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>throttle</td>
<td>increases or decreases the height of the drone by adjusting all propellers equally</td>
</tr>
<tr class="even">
<td>yaw</td>
<td>turns the drone clockwise or counterclockwise by varying propeller speeds</td>
</tr>
<tr class="odd">
<td>pitch</td>
<td>moves the drone forward or backward by changing speeds between front and back propellers</td>
</tr>
<tr class="even">
<td>roll</td>
<td>moves the drone left or right by varying left and right propeller speeds</td>
</tr>
</tbody>
</table>
<p><br> This video explains very clearly how it works: </p><div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/C0KBu2ihp-s" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p></p>
<p>The Tello doesn’t come with a controller, we fly it through the Tello app. I used the Tello app for iPhone. This app hasn’t been updated for a long time and unfortunately it is useless as it crashes all the time. When the app crashes the drone keeps on hovering in the air, so this first crash is just a software crash.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you want to fly the TT or Tello manually I recommend you get the <a href="https://apps.apple.com/us/app/tellofpv/id1545864950">TelloFPV</a>. It’s not free, but doesn’t crash either.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>To really enjoy flying the TT manually you can get a controller that is customized for the Tello: the <a href="https://gamesir.com/pages/tello-tutorial">GameSir T1d</a>. I got one, and it works straight out of the box — even with the TelloFPV app.</p>
</div>
</div>
<section id="beware-of-the-ceiling-effect" class="level3">
<h3 class="anchored" data-anchor-id="beware-of-the-ceiling-effect">Beware of the ceiling effect</h3>
<p>While flying the drone around a bit in my office, I went up a bit too high and the drone crashed when it came near the ceiling. This phenomenon even has a name and is called the “ceiling effect.” Basically, the drone gets <a href="https://aviation.stackexchange.com/questions/59128/what-disadvantages-does-flying-a-drone-close-under-a-ceiling-have">sucked up to the ceiling</a> because there is not enough air to push down through the propellers.</p>
<p>Alright, now for the real fun — controlling the drone with code.</p>
</section>
</section>
<section id="the-tello-python-sdk" class="level2">
<h2 class="anchored" data-anchor-id="the-tello-python-sdk">The Tello Python SDK</h2>
<p>DJI provides an SDK for the Tello drone that can be used with Python. The SDK can be used to control the drone through its API. The API is fairly basic but supports:</p>
<ul>
<li>Flight control with takeoff, landing and movement commands</li>
<li>Flight status information (battery level, height, acceleration, speed)</li>
<li>Stream camera feed</li>
</ul>
<p>The Python library we will be using for this SDK is <a href="https://github.com/damiafuentes/DJITelloPy">DJITelloPy</a>.</p>
<p>A couple of useful resources:</p>
<ul>
<li><a href="https://dl.djicdn.com/downloads/RoboMaster+TT/Tello_SDK_3.0_User_Guide_en.pdf">SDK 3.0 user guide</a> (includes the API spec).</li>
<li><a href="https://robomaster-dev.readthedocs.io/en/latest/">RoboMaster Developer Guide</a> (also for RoboMasters on wheels).</li>
<li><a href="https://github.com/dji-sdk/RoboMaster-SDK">RoboMaster SDK</a> (as provided by DJI).</li>
<li><a href="https://djitellopy.readthedocs.io/en/latest/tello/">DJITelloPy API Reference</a>.</li>
</ul>
<p>To give it a try, let’s first install djitellopy:</p>
<div id="setup" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>{sys.executable} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m pip install djitellopy</span></code></pre></div>
</div>
<section id="take-off-fly-land" class="level3">
<h3 class="anchored" data-anchor-id="take-off-fly-land">Take-off, fly, land</h3>
<p>Let’s start with a simple script to take-off, fly, and land the drone.</p>
<p>To make this work the computer running the script needs to be connected to the Wifi Access Point the Tello provides. The SSID is of the form <code>TELLO-XXXXXX</code>.</p>
<div id="1765d13e" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> djitellopy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tello</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb2-3"></span>
<span id="cb2-4">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tello.Tello()</span>
<span id="cb2-5">t.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bat: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_battery()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Temp: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_temperature()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">t.takeoff()</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Send RC control via four channels. Command is sent every self.TIME_BTW_RC_CONTROL_COMMANDS seconds.</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Arguments:</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    left_right_velocity: -100~100 (left/right)</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    forward_backward_velocity: -100~100 (forward/backward)</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    up_down_velocity: -100~100 (up/down)</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    yaw_velocity: -100~100 (yaw)</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-19">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-20">sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-21">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-22">sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-23">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't forget this!</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">t.land()</span>
<span id="cb2-26">t.end()</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>[INFO] tello.py - 129 - Tello instance was initialized. Host: '192.168.1.85'. Port: '8889'.
[INFO] tello.py - 438 - Send command: 'command'
[INFO] tello.py - 462 - Response command: 'ok'
Bat: 100
Temp: 45.0
[INFO] tello.py - 438 - Send command: 'takeoff'
[INFO] tello.py - 462 - Response takeoff: 'ok'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 0 50 0 0'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 30 0 0 0'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 0 0 0 0'
[INFO] tello.py - 438 - Send command: 'land'
[INFO] tello.py - 462 - Response land: 'ok'</code></pre>
</div>
<p>It is pretty straightforward. My first attempt made the drone crash though: not having the <code>t.send_rc_control(0, 0, 0, 0)</code> command there tells the drone to move sideways (to the right) while landing, with the expected result.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The code above was executed in my code editor and the output you see there is the actual output. Similar to a frozen Jupyter notebook. This is possible because this blog is powered by <a href="https://quarto.org">Quarto</a>. If you haven’t tried Quarto, maybe check it out.</p>
</div>
</div>
</section>
<section id="using-router-mode" class="level3">
<h3 class="anchored" data-anchor-id="using-router-mode">Using router mode</h3>
<p>It is quite annoying that the computer you are working on is not connected to the Internet while testing the code (it is connected to the wifi of the drone). Every five seconds I MUST check with Claude/ChatGPT if I am doing things right, no?</p>
<p>For the original Tello there is nothing we can do about that, but the RoboMaster TT has two <a href="https://robomaster-dev.readthedocs.io/en/latest/third_part_comm.html#wi-fi-connection">wifi connection modes</a>:</p>
<ul>
<li>Direct connection mode (aka AP mode): this is what we did so far, the Tello provides an access point and the computer connects to that.</li>
<li>Router mode (aka STA mode): both the TT and the computer connect to the same wifi router, so we are still online if that router is our home router.</li>
</ul>
<p>The TT has an expansion kit that contains a small microprocessor that provides wifi and Bluetooth connectivity: <a href="https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf">ESP32-D2WD</a>. We will have a look later to see what we can do with it, for now we just use the wifi in router mode. There is a tiny switch on the expansion unit that we can toggle between the two modes. It does involve a couple of other steps though, which are outlined here: <a href="https://robomaster-dev.readthedocs.io/en/latest/text_sdk/connection.html#connection-examples">Connection examples</a>. It didn’t work for me (there is no QR code I can get from the Tello app), so I will show you what I did:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before continuing, the controller needs to be activated from the Tello app! This happens after the firmware update of this controller. This cost me a couple of days of my life, so next time I’ll RTFM.</p>
</div>
</div>
<section id="step-1." class="level4">
<h4 class="anchored" data-anchor-id="step-1.">Step 1.</h4>
<p>Set the switch to AP mode first (down).</p>
</section>
<section id="step-2." class="level4">
<h4 class="anchored" data-anchor-id="step-2.">Step 2.</h4>
<p>Connect the PC to the RMTT-xxx network. We are now in direct connection mode, provided by the Wifi on the expansion kit.</p>
</section>
<section id="step-4" class="level4">
<h4 class="anchored" data-anchor-id="step-4">Step 4:</h4>
<p>Run this script:</p>
<div id="0c6affc6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> socket</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> getpass</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Environment variables for Wi-Fi credentials just to make it run in a notebook</span></span>
<span id="cb4-7">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_SSID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MyNetwork"</span></span>
<span id="cb4-8">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_PASSWORD"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SuperSecret"</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">sock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span>
<span id="cb4-11">sock.settimeout(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_wifi_credentials():</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-16">        ssid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wi-Fi SSID: "</span>)</span>
<span id="cb4-17">        password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getpass.getpass(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wi-Fi Password: "</span>)</span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">EOFError</span>, getpass.GetPassWarning, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb4-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fall back to environment variables</span></span>
<span id="cb4-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interactive input not available. Falling back to environment variables."</span>)</span>
<span id="cb4-21">        ssid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_SSID"</span>)</span>
<span id="cb4-22">        password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_PASSWORD"</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> ssid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> password:</span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb4-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing WIFI_SSID or WIFI_PASSWORD environment variable."</span></span>
<span id="cb4-27">            )</span>
<span id="cb4-28"></span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ssid, password</span>
<span id="cb4-30"></span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Enter SDK mode</span></span>
<span id="cb4-33">sock.sendto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"command"</span>, (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.1"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8889</span>))</span>
<span id="cb4-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-35">    response, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sock.recvfrom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb4-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response 1:"</span>, response)</span>
<span id="cb4-37"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No response to command:"</span>, e)</span>
<span id="cb4-39"></span>
<span id="cb4-40">time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Send ap command</span></span>
<span id="cb4-43">ssid, password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_wifi_credentials()</span>
<span id="cb4-44">sock.sendto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"ap %s %s"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (ssid.encode(), password.encode()), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.1"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8889</span>))</span>
<span id="cb4-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-46">    response, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sock.recvfrom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb4-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response 2:"</span>, response)</span>
<span id="cb4-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No response to ap:"</span>, e)</span></code></pre></div>
</div>
</section>
<section id="step-5" class="level4">
<h4 class="anchored" data-anchor-id="step-5">Step 5:</h4>
<p>Toggle the switch to STA mode (up).</p>
</section>
<section id="step-6" class="level4">
<h4 class="anchored" data-anchor-id="step-6">Step 6:</h4>
<p>Connect the PC to the wifi network you provided in the script above.</p>
</section>
<section id="step-7" class="level4">
<h4 class="anchored" data-anchor-id="step-7">Step 7:</h4>
<p>Find the IP address that was assigned to the TT (e.g.&nbsp;in your home router admin settings).</p>
</section>
<section id="step-8" class="level4">
<h4 class="anchored" data-anchor-id="step-8">Step 8:</h4>
<p>Use this IP address every time you connect to the Tello in your code:</p>
<div id="c6d45296" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tello.Tello(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.85"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the IP address from step 7</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">t.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span></code></pre></div>
</div>
<p>From here on we can connect to the TT and also be connected to the Internet. Yay!</p>
</section>
</section>
<section id="thanks" class="level3">
<h3 class="anchored" data-anchor-id="thanks">Thanks!</h3>
<p>I want to thank <a href="https://github.com/murtazahassan">Murtaza Hassan</a> for getting me started through this video: <a href="https://www.youtube.com/watch?v=LmEcyQnfpDA">Drone Programming With Python Course</a>.</p>
<hr>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>In the next episode I’m going to implement keyboard control and stream video frames to the PC and save them on disk on demand (“inspired” by Murtaza <sup>1</sup>).</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/enter-the-tello/">← Previous: Enter the Tello</a>
</div>
<div>
<a href="../../posts/key-navigation-video-snapshots/">Next: Key navigation &amp; Video snapshots →</a>
</div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Borrowed is the real word here. No: stolen!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>drone</category>
  <category>code</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/crash-the-tello/</guid>
  <pubDate>Wed, 23 Apr 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/crash-the-tello/crashed-TT2.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Enter the Tello</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/enter-the-tello/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-20</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Combined interests in hiking, coding, and new tech led to a drone project idea</li>
<li>Goal: build an autonomous scouting drone for hiking adventures</li>
<li>Started with no drone or computer vision experience</li>
<li>Resisted the urge to over-invest at first (just bought the domain dronelab.dev)</li>
<li>Chose the DJI RoboMaster TT as a beginner-friendly, programmable drone</li>
<li>Next steps: experiment with the RoboMaster TT, both manually and with code</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>

</div>
<div>
<a href="../../posts/crash-the-tello/">Next: Crash the Tello →</a>
</div>
</div>
</div>
</div>
</div>
<section id="combine-the-stuff-you-like" class="level2">
<h2 class="anchored" data-anchor-id="combine-the-stuff-you-like">Combine the stuff you like</h2>
<p>“Combine the stuff you like” is good advice when looking for a new project to work on. I like to follow good advice and so I brainstormed a bit with ChatGPT to find interesting intersections between my interests. Some of my favorite activities — like sex, meditation, and reading — didn’t quite lend themselves to computer vision projects. Others had more potential: hiking in nature, coding, learning about new tech.</p>
</section>
<section id="autonomous-scouting-drone" class="level2">
<h2 class="anchored" data-anchor-id="autonomous-scouting-drone">Autonomous scouting drone</h2>
<p>Having a drone accompany us on hikes to do some scouting ahead hits the mark for me. It includes hiking and coding, and most important: I need to learn a lot to make a drone do what I want. I have zero experience with drones and very limited experience with computer vision models.</p>
</section>
<section id="getting-ready-big-time" class="level2">
<h2 class="anchored" data-anchor-id="getting-ready-big-time">Getting ready big time</h2>
<p>Like any self-respecting tech nerd, I decided to kick things off in style:</p>
<ol type="1">
<li>Buy a domain name (most important!)</li>
<li>Get a logo (as important!)</li>
<li>Buy the best dev/DIY drone out there</li>
<li>Buy a top line PC to train models</li>
<li>Buy another PC to run simulation environments</li>
</ol>
<p>OK, guilty — I bought the domain (hello <a href="../..">dronelab.dev</a>), but <em>tried</em> to stop myself there <sup>1</sup> <sup>2</sup>. I don’t know anything about drones, and might get bored with the project after a couple of weeks, so better start small.</p>
</section>
<section id="enter-the-tello" class="level2">
<h2 class="anchored" data-anchor-id="enter-the-tello">Enter the Tello</h2>
<p>I stumbled upon a modest little drone from way back in 2018 <sup>3</sup> — the DJI Tello — and it was perfect for my first steps. It can fly indoors, is programmable and has a camera.</p>
<p>There is an even better version of it with some extra goodies that might come in handy:</p>
<ul>
<li>an onboard processor</li>
<li>a matrix display</li>
<li>a distance sensor</li>
</ul>
<p>So I bought the DJI RoboMaster TT. TT stands for Tello Talent — basically smart kids coding drones at an age I was still figuring out crayons.</p>
<p>Look at that beauty!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/enter-the-tello/tt.jpg" class="img-fluid figure-img"></p>
<figcaption>DJI RoboMaster TT</figcaption>
</figure>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>In the next episode I will play with the RoboMaster TT, both with and without code to control it. It includes different ways to crash it. <a href="../../posts/crash-the-tello">Read on…</a></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>

</div>
<div>
<a href="../../posts/crash-the-tello/">Next: Crash the Tello →</a>
</div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I always buy the domain first, even before I know what I’m doing.↩︎</p></li>
<li id="fn2"><p>I didn’t really stop myself there, I also created a logo. Technically ChatGPT did: <img src="https://dronelab.dev/posts/enter-the-tello/logo_high.png" class="img-fluid" alt="dronelab">↩︎</p></li>
<li id="fn3"><p>2018, also the last time I blogged something: <a href="https://decentralized.blog/">decentralized.blog</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>drone</category>
  <category>tello</category>
  <guid>https://dronelab.dev/posts/enter-the-tello/</guid>
  <pubDate>Sat, 19 Apr 2025 21:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/enter-the-tello/tt.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
