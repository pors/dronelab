<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>dronelab.dev</title>
<link>https://dronelab.dev/</link>
<atom:link href="https://dronelab.dev/index.xml" rel="self" type="application/rss+xml"/>
<description>DroneLab - Coding Autonomous Drones in Baby Steps.</description>
<generator>quarto-1.7.27</generator>
<lastBuildDate>Thu, 01 May 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>GameSir T1d controller &amp; pygame</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/gamesir-t1d-controller/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-05-02</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Connect a GameSir T1d controller to your computer via Bluetooth using a BLE hacking approach (the controller normally only works with the Tello app)</li>
<li>Parse controller input data for all buttons, joysticks, and triggers using Python and bleak</li>
<li>Create a pygame-compatible wrapper that lets you use the controller in any Python application</li>
<li>Control your Tello drone with precise analog joysticks instead of keyboard keys</li>
<li>Complete working code provided with step-by-step explanation of the controller hacking process</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/key-navigation-video-snapshots/">← Previous: Key navigation &amp; video snapshots</a>
</div>
</div>
</div>
</div>
</div>
<p>Controlling a drone with a keyboard is not great, neither is using the touch-screen of a phone. That’s why I bought the recommended controller for the Tello: the <a href="https://www.manualpdf.in/dji/tello-gamesir-t1d/manual">GameSir T1d</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/gamesir-t1d-controller/GameSir-T1d.png" class="img-fluid figure-img"></p>
<figcaption>GameSir T1d controller</figcaption>
</figure>
</div>
<section id="hook-up-the-gamesir-t1d" class="level2">
<h2 class="anchored" data-anchor-id="hook-up-the-gamesir-t1d">Hook up the GameSir T1d</h2>
<p>Initially this seemed like a no-brainer, and I was surprised why no-one else hadn’t done it yet: replace the keyboard strokes with signals from the GameSir T1d controller. It turns out that this controller was specifically modified to connect ONLY through the Tello app.</p>
<p>Normally the code below is enough to connect to a game controller from a python script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb1-2"></span>
<span id="cb1-3">pygame.init()</span>
<span id="cb1-4">pygame.joystick.init()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for connected controllers</span></span>
<span id="cb1-7">joystick_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.joystick.get_count()</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> joystick_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No controller detected. Please connect your GameSir T1d controller."</span>)</span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the first controller detected</span></span>
<span id="cb1-14">joystick <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.joystick.Joystick(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-15">joystick.init()</span></code></pre></div>
<p>In our case the output was:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">No controller detected. Please connect your GameSir T1d controller.</span></code></pre></div>
<p>Oh oh, problem!</p>
</section>
<section id="hack-it" class="level2">
<h2 class="anchored" data-anchor-id="hack-it">Hack it!</h2>
<p>After some searching and LLM’ing it became clear that there <em>is</em> a way to make it work.</p>
<p><strong>Pfew!</strong></p>
<p>For Internet historians, here is the evolution of the hack:</p>
<ol type="1">
<li><a href="https://cloud.tencent.com/developer/article/1756298">original Python 2 script</a></li>
<li><a href="https://github.com/Diallomm/hack_GamesirT1d/tree/main">ported to Python 3</a></li>
<li><a href="https://gist.github.com/ElishaAz/a83dfa8f2d53497d7d1d0bca03bfced2">using bleak</a></li>
<li><a href="https://gist.github.com/Cacti-Master/89f0f397a13f28ada046ec42477bc9fd">refactor</a></li>
</ol>
</section>
<section id="gamesir-t1d-hack-version-5" class="level2">
<h2 class="anchored" data-anchor-id="gamesir-t1d-hack-version-5">GameSir T1D hack version 5</h2>
<p>I’m honored to step in the footsteps of these four hackers and try to get iteration five to work!</p>
<p>First we need to get the controller to connect. Simply pairing via Bluetooth won’t work.</p>
<p>The GameSir T1d gets into pairing mode by simply powering it on. The four blue power LEDs start blinking when trying to connect. At that state we run the script below (on github: <a href="https://github.com/pors/tello-play/blob/main/gamesirT1d-connect.py">gamesirT1d-connect.py</a>).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a tiny button labeled <code>pair</code> above another tiny button labeled <code>C1</code>. This <code>pair</code> button can be used to pair a new device (great UX!). Clicking it while connected, will cause the Bluetooth connection to be dropped. So don’t click it while controlling a drone!</p>
</div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">BLE Controller Connection Preview</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Full script</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Output</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name our controller should broadcast as</span></span>
<span id="cb3-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d"</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting BLE scan for GameSir-T1d controller..."</span>)</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name our controller should broadcast as</span></span>
<span id="cb4-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d"</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb4-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting BLE scan for GameSir-T1d controller..."</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First, scan for all available BLE devices</span></span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scanning for BLE devices..."</span>)</span>
<span id="cb4-12">    devices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> BleakScanner.discover()</span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print all found devices to help with debugging</span></span>
<span id="cb4-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(devices)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Bluetooth devices:"</span>)</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, device <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(devices):</span>
<span id="cb4-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Address: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-18"></span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to find our controller</span></span>
<span id="cb4-20">    target_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> device <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> devices:</span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> device.name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> CONTROLLER_NAME.lower() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> device.name.lower():</span>
<span id="cb4-23">            target_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb4-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found controller: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Address: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-26"></span>
<span id="cb4-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> target_device:</span>
<span id="cb4-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"No device found with name containing '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb4-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Is the controller turned on and in pairing mode?"</span>)</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-31"></span>
<span id="cb4-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to connect to the controller</span></span>
<span id="cb4-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempting to connect to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb4-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> BleakClient(target_device.address, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> client:</span>
<span id="cb4-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> client.is_connected:</span>
<span id="cb4-37">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully connected to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span>)</span>
<span id="cb4-38"></span>
<span id="cb4-39">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List available services and characteristics</span></span>
<span id="cb4-40">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Available services and characteristics:"</span>)</span>
<span id="cb4-41">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> service <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> client.services:</span>
<span id="cb4-42">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Service: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-43">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> service.characteristics:</span>
<span id="cb4-44">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Characteristic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>char<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-45">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"    Properties: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>char<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>properties<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-46"></span>
<span id="cb4-47">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a moment so we can see the connection is established</span></span>
<span id="cb4-48">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Connection successful. Press Ctrl+C to exit..."</span>)</span>
<span id="cb4-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-51">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to connect"</span>)</span>
<span id="cb4-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error connecting to device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-54"></span>
<span id="cb4-55"></span>
<span id="cb4-56"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure controller is in pairing mode before running this</span></span>
<span id="cb4-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make sure the GameSir-T1d controller is turned on and in pairing mode."</span>)</span>
<span id="cb4-59">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Typically hold power button until LEDs flash rapidly)"</span>)</span>
<span id="cb4-60">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Enter to start scanning..."</span>)</span>
<span id="cb4-61"></span>
<span id="cb4-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the async main function</span></span>
<span id="cb4-63">    asyncio.run(main())</span></code></pre></div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<pre class="text"><code>Make sure the GameSir-T1d controller is turned on and in pairing mode.
(Typically hold power button until LEDs flash rapidly)
Press Enter to start scanning...
Starting BLE scan for GameSir-T1d controller...
Scanning for BLE devices...
Found 11 Bluetooth devices:
1. Name: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401
2. Name: None, Address: 3A2C8191-D3F5-F471-BC81-75AFE2DB0D60
3. Name: None, Address: 772F5433-AAE9-D456-209C-DEA32D192E10
...
11. Name: None, Address: 80334171-1943-B3DE-7DDD-773753B852C3
Found controller: Gamesir-T1d-39BD, Address: FDF00BC3-1DEE-1525-0B34-7E2D3391C401
Attempting to connect to Gamesir-T1d-39BD...
Successfully connected to Gamesir-T1d-39BD!

Available services and characteristics:
Service: 00008650-0000-1000-8000-00805f9b34fb
  Characteristic: 00008651-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
  Characteristic: 00008655-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
  Characteristic: 0000865f-0000-1000-8000-00805f9b34fb
    Properties: ['read', 'write', 'notify', 'indicate']
Service: 0000180a-0000-1000-8000-00805f9b34fb
  Characteristic: 00002a24-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a25-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a27-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a26-0000-1000-8000-00805f9b34fb
    Properties: ['read']
  Characteristic: 00002a50-0000-1000-8000-00805f9b34fb
    Properties: ['read']

Connection successful. Press Ctrl+C to exit...</code></pre>
</div>
</div>
</div>
<p>If you have inspected the output tab, you see we succeeded! Yay, let’s move on.</p>
</section>
<section id="read-the-t1d-controller-state" class="level2">
<h2 class="anchored" data-anchor-id="read-the-t1d-controller-state">Read the T1d controller state</h2>
<p>Now the controller is connected to the computer, let’s see if we can read joystick and button changes.</p>
<p>There’s a heap of input elements that need to be read and made compatible with gamepy:</p>
<ul>
<li>Both joysticks (LX, LY, RX, RY)</li>
<li>Analog triggers (L2, R2)</li>
<li>Buttons (A, B, X, Y, L1, R1, C1, C2, Menu)</li>
<li>D-pad (Up, Down, Left, Right)</li>
</ul>
<p>The script below prints the real-time value of each of these inputs while using the controller (on github: <a href="https://github.com/pors/tello-play/blob/main/gamesirT1d-read.py">gamesirT1d-read.py</a>).</p>
<p>From here on we don’t need to pair the controller, we just use the device name that was identified in the previous step.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Read Controller State Preview</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Full script</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Output</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The exact name our controller showed up as</span></span>
<span id="cb6-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The characteristic we want to read</span></span>
<span id="cb6-7">CHARACTERISTIC_UUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00008651-0000-1000-8000-00805f9b34fb"</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameSirT1d:</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bleak <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BleakClient, BleakScanner</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The exact name our controller showed up as</span></span>
<span id="cb7-5">CONTROLLER_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The characteristic we want to read</span></span>
<span id="cb7-7">CHARACTERISTIC_UUID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00008651-0000-1000-8000-00805f9b34fb"</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameSirT1d:</span>
<span id="cb7-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Joystick values (0-1023, with 512 as center)</span></span>
<span id="cb7-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb7-16">        </span>
<span id="cb7-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analog triggers (0-255)</span></span>
<span id="cb7-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-20">        </span>
<span id="cb7-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Digital buttons (0 or 1)</span></span>
<span id="cb7-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.menu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-31">        </span>
<span id="cb7-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D-pad</span></span>
<span id="cb7-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-37">        </span>
<span id="cb7-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connection state</span></span>
<span id="cb7-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-41">    </span>
<span id="cb7-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb7-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Parse the raw data from the controller"""</span></span>
<span id="cb7-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:</span>
<span id="cb7-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-46">        </span>
<span id="cb7-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse joysticks</span></span>
<span id="cb7-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x3f</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb7-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))</span>
<span id="cb7-52">        </span>
<span id="cb7-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse triggers</span></span>
<span id="cb7-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb7-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb7-56">        </span>
<span id="cb7-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse buttons from byte 9</span></span>
<span id="cb7-58">        buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb7-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x01</span>))</span>
<span id="cb7-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x02</span>))</span>
<span id="cb7-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.menu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x04</span>))</span>
<span id="cb7-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x08</span>))</span>
<span id="cb7-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span>))</span>
<span id="cb7-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x40</span>))</span>
<span id="cb7-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x80</span>))</span>
<span id="cb7-66">        </span>
<span id="cb7-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse more buttons from byte 10</span></span>
<span id="cb7-68">        buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb7-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x04</span>))</span>
<span id="cb7-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(buttons2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x08</span>))</span>
<span id="cb7-71">        </span>
<span id="cb7-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse D-pad from byte 11</span></span>
<span id="cb7-73">        dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>]</span>
<span id="cb7-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x01</span>)</span>
<span id="cb7-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x03</span>)</span>
<span id="cb7-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x05</span>)</span>
<span id="cb7-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dpad_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dpad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x07</span>)</span>
<span id="cb7-78">        </span>
<span id="cb7-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-80">    </span>
<span id="cb7-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a string representation of the controller state"""</span></span>
<span id="cb7-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (</span>
<span id="cb7-84">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Joysticks: LX=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>lx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, LY=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ly<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, RX=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>rx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, RY=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ry<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-85">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Triggers: L2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, R2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-86">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Buttons: A=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, B=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, X=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, "</span></span>
<span id="cb7-87">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"L1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, R1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, C1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>c1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, C2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>c2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Menu=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>menu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-88">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"D-pad: Up=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_up<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Down=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_down<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Left=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_left<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Right=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dpad_right<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-89">        )</span>
<span id="cb7-90">    </span>
<span id="cb7-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add methods to get normalized values (-1.0 to 1.0) for joysticks</span></span>
<span id="cb7-92">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_left_stick(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get normalized values for left stick (-1.0 to 1.0)"""</span></span>
<span id="cb7-94">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-95">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x, y)</span>
<span id="cb7-97">    </span>
<span id="cb7-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_right_stick(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get normalized values for right stick (-1.0 to 1.0)"""</span></span>
<span id="cb7-100">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-101">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1.0 to 1.0</span></span>
<span id="cb7-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x, y)</span>
<span id="cb7-103"></span>
<span id="cb7-104"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb7-105">    controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameSirT1d()</span>
<span id="cb7-106">    </span>
<span id="cb7-107">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scanning for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb7-108">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> BleakScanner.find_device_by_name(CONTROLLER_NAME)</span>
<span id="cb7-109">    </span>
<span id="cb7-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> device:</span>
<span id="cb7-111">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Could not find </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Is it turned on?"</span>)</span>
<span id="cb7-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb7-113">    </span>
<span id="cb7-114">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>CONTROLLER_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> at </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>address<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-115">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting..."</span>)</span>
<span id="cb7-116">    </span>
<span id="cb7-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> BleakClient(device.address) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> client:</span>
<span id="cb7-119">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connected!"</span>)</span>
<span id="cb7-120">            controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-121">            controller._client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client</span>
<span id="cb7-122">            </span>
<span id="cb7-123">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-124">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> controller.connected:</span>
<span id="cb7-125">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read current state</span></span>
<span id="cb7-126">                    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.read_gatt_char(CHARACTERISTIC_UUID)</span>
<span id="cb7-127">                    </span>
<span id="cb7-128">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the data</span></span>
<span id="cb7-129">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> controller.parse_data(data):</span>
<span id="cb7-130">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get normalized stick values for easier use</span></span>
<span id="cb7-131">                        left_x, left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_left_stick()</span>
<span id="cb7-132">                        right_x, right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_right_stick()</span>
<span id="cb7-133">                        </span>
<span id="cb7-134">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the line and print current state</span></span>
<span id="cb7-135">                        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Left: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>left_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>left_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) Right: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>right_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>right_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | "</span></span>
<span id="cb7-136">                              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> B:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> X:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Y:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span></span>
<span id="cb7-137">                              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"L1:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> R1:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> L2:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> R2:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>controller<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-138">                    </span>
<span id="cb7-139">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a bit before next reading</span></span>
<span id="cb7-140">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20Hz polling rate</span></span>
<span id="cb7-141">                    </span>
<span id="cb7-142">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardInterrupt</span>:</span>
<span id="cb7-143">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Stopping..."</span>)</span>
<span id="cb7-144">                controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-145">    </span>
<span id="cb7-146">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb7-147">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-148">        controller.connected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-149"></span>
<span id="cb7-150"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-151">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GameSir T1d Controller Test"</span>)</span>
<span id="cb7-152">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move joysticks and press buttons to see values"</span>)</span>
<span id="cb7-153">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Ctrl+C to exit"</span>)</span>
<span id="cb7-154">    </span>
<span id="cb7-155">    asyncio.run(main())</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb8-1">GameSir T1d Controller Test</span>
<span id="cb8-2">Move joysticks and press buttons to see values</span>
<span id="cb8-3">Press Ctrl+C to exit</span>
<span id="cb8-4">Scanning for Gamesir-T1d-39BD...</span>
<span id="cb8-5">Found Gamesir-T1d-39BD at FDF00BC3-1DEE-1525-0B34-7E2D3391C401</span>
<span id="cb8-6">Connecting...</span>
<span id="cb8-7">Connected!</span>
<span id="cb8-8">Left: (0.05, 0.03) Right: (-0.10, -0.13) | A:1 B:0 X:0 Y:0 L1:0 R1:0 L2:3 R2:155</span></code></pre></div>
</div>
</div>
</div>
<p>That seems to work pretty good! Now we can move on and create a wrapper that behaves as if it was part of a gamepy compatible controller.</p>
</section>
<section id="gamesir-t1d-pygame-compatible-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="gamesir-t1d-pygame-compatible-wrapper">GameSir T1d Pygame-Compatible Wrapper</h2>
<p>The wrapper functions as a bridge between two worlds:</p>
<ol type="1">
<li>The BLE communication layer that talks directly to our GameSir T1d</li>
<li>A pygame-compatible interface that provides familiar methods like get_axis() and get_button()</li>
</ol>
<p>This allows our drone control code to interact with the controller as if it were a standard pygame joystick, while the BLE communication happens behind the scenes.</p>
<p>The wrapper code consists of two classes:</p>
<ol type="1">
<li>GameSirT1d: this class parses the raw inputs from the controller and converts it to the format and ranges we expect in a pygame controller.</li>
<li>GameSirT1dPygame: this class implements the BLE interface and provides the pygame compatible wrapper.</li>
</ol>
<p>The code can be found here: <a href="https://github.com/pors/tello-play/blob/main/gamesir_t1d_pygame.py">gamesir_t1d_pygame.py</a>.</p>
</section>
<section id="lets-try-it-out" class="level2">
<h2 class="anchored" data-anchor-id="lets-try-it-out">Let’s try it out!</h2>
<p>With this little example script we can see if the controller (at least the thumpsticks) does what we expect:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gamesir_t1d_pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GameSirT1dPygame</span>
<span id="cb9-3"></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(controller_name):</span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize pygame for window and graphics</span></span>
<span id="cb9-7">    pygame.init()</span>
<span id="cb9-8">    screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>))</span>
<span id="cb9-9">    pygame.display.set_caption(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GameSir T1d Test"</span>)</span>
<span id="cb9-10">    clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize our custom controller</span></span>
<span id="cb9-13">    controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameSirT1dPygame(controller_name)</span>
<span id="cb9-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting to controller..."</span>)</span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> controller.init():</span>
<span id="cb9-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to connect to controller"</span>)</span>
<span id="cb9-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb9-18"></span>
<span id="cb9-19">    running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> running:</span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process pygame events</span></span>
<span id="cb9-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb9-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT:</span>
<span id="cb9-24">                running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb9-25"></span>
<span id="cb9-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read joystick values</span></span>
<span id="cb9-27">        left_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-28">        left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-29">        right_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-30">        right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> controller.get_axis(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-31"></span>
<span id="cb9-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear screen</span></span>
<span id="cb9-33">        screen.fill((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb9-34"></span>
<span id="cb9-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw joystick positions</span></span>
<span id="cb9-36">        pygame.draw.circle(</span>
<span id="cb9-37">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-38">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left stick background</span></span>
<span id="cb9-39">        pygame.draw.circle(</span>
<span id="cb9-40">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(left_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(left_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb9-41">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left stick position</span></span>
<span id="cb9-42"></span>
<span id="cb9-43">        pygame.draw.circle(</span>
<span id="cb9-44">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-45">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right stick background</span></span>
<span id="cb9-46">        pygame.draw.circle(</span>
<span id="cb9-47">            screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(right_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(right_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb9-48">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right stick position</span></span>
<span id="cb9-49"></span>
<span id="cb9-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update display</span></span>
<span id="cb9-51">        pygame.display.flip()</span>
<span id="cb9-52"></span>
<span id="cb9-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Control frame rate</span></span>
<span id="cb9-54">        clock.tick(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb9-55"></span>
<span id="cb9-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean up</span></span>
<span id="cb9-57">    controller.quit()</span>
<span id="cb9-58">    pygame.quit()</span>
<span id="cb9-59"></span>
<span id="cb9-60"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb9-61">    main(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamesir-T1d-39BD"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace with the name of your T1d</span></span></code></pre></div>
<p>Look at that! Pretty responsive!</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/7sMoOxHOOcM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>Now that we have the T1d working with pygame we can implement the interface with the Tello. Read on…</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/key-navigation-video-snapshots/">← Previous: Key navigation &amp; video snapshots</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <guid>https://dronelab.dev/posts/gamesir-t1d-controller/</guid>
  <pubDate>Thu, 01 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/gamesir-t1d-controller/GameSir-T1d.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Key navigation &amp; Video snapshots</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/key-navigation-video-snapshots/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-27</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Learn how to control a Tello drone using keyboard navigation with responsive, event-based controls in Python (via pygame).</li>
<li>Understand why velocity-based commands and fixed frame-rate updates create smoother, more natural drone movement.</li>
<li>See how to stream live video from the drone, process frames, and overlay status info (like battery level).</li>
<li>Get step-by-step instructions to add a keyboard shortcut for saving video snapshots directly from the drone feed.</li>
<li>Discover practical tips for reliable streaming and why naive command loops don’t work well for real-time control.</li>
<li>Preview what’s next: moving from keyboard to game controller navigation for even better piloting.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/crash-the-tello/">← Previous: Crash the Tello</a>
</div>
<div>
<a href="../../posts/gamesir-t1d-controller/">Next: GameSir T1d &amp; pygame →</a>
</div>
</div>
</div>
</div>
</div>
<section id="keyboard-navigation" class="level2">
<h2 class="anchored" data-anchor-id="keyboard-navigation">Keyboard navigation</h2>
<p>Now that we can control the TT with code, let’s extend that to a human in the ground-bound pilot seat. The most simple approach is to use specific keyboard strokes to map to drone navigation commands.</p>
<p>Keyboard navigation is implemented as an example in the DJSTelloPy repo: <a href="https://github.com/damiafuentes/DJITelloPy/blob/master/examples/manual-control-pygame.py">manual-control-pygame.py</a>. This is quite a cool piece of code. It uses pygame, which I never used before, so lets go through some of the interesting parts of the code.</p>
<section id="the-secret-sauce-event-based-controls" class="level3">
<h3 class="anchored" data-anchor-id="the-secret-sauce-event-based-controls">The secret sauce: Event-based controls</h3>
<p>The example uses pygame’s event system rather than simple polling, and this creates nice and responsive controls.</p>
<div id="8d77cf63" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a timer that triggers events at the specified frame rate</span></span>
<span id="cb1-2">pygame.time.set_timer(pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> FPS)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In the main loop, process all pending events</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN:</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keydown(event.key)</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYUP:</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keyup(event.key)</span></code></pre></div>
</div>
<p>Instead of constantly checking “is this key pressed?” in a loop, the code waits for pygame to tell it when keys are pressed or released. This means:</p>
<ol type="1">
<li>no missed keypresses, even if they happen very quickly</li>
<li>immediate detection of key events</li>
<li>clear separation between “key is pressed” and “key is released” logic</li>
</ol>
<p>Pretty cool.</p>
</section>
<section id="smooth-flying-with-velocity-controls" class="level3">
<h3 class="anchored" data-anchor-id="smooth-flying-with-velocity-controls">Smooth flying with velocity controls</h3>
<p>Another interesting bit from the example code is how smoothly it makes the drone fly. This is done through velocity-based control (not up, down, left etc. commands).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize velocity variables</span></span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward/backward</span></span>
<span id="cb2-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left/right</span></span>
<span id="cb2-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Up/down</span></span>
<span id="cb2-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotation</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When UP arrow is pressed</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keydown(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP:</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set to speed value (60)</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...other keys...</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When UP arrow is released</span></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keyup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_DOWN:</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop movement</span></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...other keys...</span></span></code></pre></div>
<p>Instead of sending a “move forward” command when we press UP, it sets a forward velocity that remains until we release the key. This creates a very natural movement, especially when:</p>
<ul>
<li>moving diagonally (pressing UP and RIGHT simultaneously)</li>
<li>transitioning between movements (release UP while still holding RIGHT)</li>
<li>making subtle adjustments to flight path</li>
</ul>
</section>
<section id="the-heartbeat-why-frame-rate-matters" class="level3">
<h3 class="anchored" data-anchor-id="the-heartbeat-why-frame-rate-matters">The Heartbeat: Why frame rate matters</h3>
<p>Something that reminds me of my hardware/telco days: the pygame library work synchronously with fixed time intervals. This line sets the heartbeat:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pygame.time.set_timer(pygame.USEREVENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> FPS)</span></code></pre></div>
<p>Basically at each interval it listens for user events and handles them as needed. At 120 FPS, it generates an event every 8.3 milliseconds, triggering e.g.&nbsp;our update function:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control:</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.send_rc_control(</span>
<span id="cb4-4">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity,</span>
<span id="cb4-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity,</span>
<span id="cb4-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity, </span>
<span id="cb4-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity</span>
<span id="cb4-8">        )</span></code></pre></div>
</section>
<section id="why-not-send-commands-immediately" class="level3">
<h3 class="anchored" data-anchor-id="why-not-send-commands-immediately">Why not send commands immediately?</h3>
<p>The naive alternative is to have a <code>while True:</code> loop that reads key strokes and react to that instantly. What’s wrong with that?</p>
<ol type="1">
<li><strong>Command Rate Control</strong>: Drones can get overwhelmed if we send too many commands too quickly</li>
<li><strong>Command Combination</strong>: If we press multiple keys in one frame, they’re combined into a single efficient command</li>
<li><strong>Smooth Motion</strong>: Even, regular command timing creates more natural drone movement</li>
</ol>
<p>I tried the <code>while True</code> approach and it doesn’t work that great. There is no feel between pressing keys and the drone following up on that.</p>
<p>So, I learned something new: <code>pygame</code>, which I’m sure will come in handy soon (spoiler alert: after this I want to use the GameSire controller to fly the Tello. Guess which library is great to speak to gaming consoles!).</p>
</section>
</section>
<section id="video-streaming-snapshots" class="level2">
<h2 class="anchored" data-anchor-id="video-streaming-snapshots">Video streaming &amp; snapshots</h2>
<p>There is no autonomous flying without vision, and now is the first time we can have a peek at streaming video and capturing it.</p>
<p>The same example from above contains the video streaming as well.</p>
<section id="video-streaming" class="level3">
<h3 class="anchored" data-anchor-id="video-streaming">Video streaming</h3>
<section id="setting-up-the-stream" class="level4">
<h4 class="anchored" data-anchor-id="setting-up-the-stream">Setting Up the Stream</h4>
<p>First, the code initializes the video stream:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure streaming is off before we start</span></span>
<span id="cb5-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamoff()</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then turn streaming on</span></span>
<span id="cb5-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.streamon()</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the object that will give us frames</span></span>
<span id="cb5-7">frame_read <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_frame_read()</span></code></pre></div>
<p>This pattern of turning streaming off then on again is a good practice to ensure we’re starting with a clean slate. I had it hang a couple of times before applying this trick.</p>
</section>
<section id="capturing-and-processing-frames" class="level4">
<h4 class="anchored" data-anchor-id="capturing-and-processing-frames">Capturing and processing frames</h4>
<p>In the main loop, the code grabs frames from the drone and processes them:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the latest frame</span></span>
<span id="cb6-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frame_read.frame</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add battery information to the frame</span></span>
<span id="cb6-5">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Battery: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_battery())</span>
<span id="cb6-6">cv2.putText(frame, text, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">720</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb6-7">    cv2.FONT_HERSHEY_SIMPLEX, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<p>This overlays the battery percentage in red text at the bottom left of the frame. A handy feature when we’re flying!</p>
</section>
<section id="frame-transformation" class="level4">
<h4 class="anchored" data-anchor-id="frame-transformation">Frame transformation</h4>
<p>The next three lines are needed for displaying the frame correctly in pygame:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OpenCV uses BGR, pygame needs RGB</span></span>
<span id="cb7-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate the frame 90 degrees</span></span>
<span id="cb7-5">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.rot90(frame)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flip the frame upside down</span></span>
<span id="cb7-8">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.flipud(frame)</span></code></pre></div>
<p>Why all this transformation? Cameras often capture images in orientations or color formats that aren’t immediately displayable. OpenCV uses BGR color format while pygame expects RGB, and the Tello camera orientation needs adjusting to appear correctly on screen.</p>
</section>
<section id="displaying-in-pygame" class="level4">
<h4 class="anchored" data-anchor-id="displaying-in-pygame">Displaying in pygame</h4>
<p>Finally, the frame is displayed in the pygame window:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert numpy array to a pygame surface</span></span>
<span id="cb8-2">frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.surfarray.make_surface(frame)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the surface to the screen</span></span>
<span id="cb8-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(frame, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the display</span></span>
<span id="cb8-8">pygame.display.update()</span></code></pre></div>
<p>This process happens every frame (120 times per second with the default settings), creating a smooth video feed.</p>
</section>
</section>
<section id="video-snapshots" class="level3">
<h3 class="anchored" data-anchor-id="video-snapshots">Video snapshots</h3>
<p>Not included in the example code is the ability to take a snapshot by pressing a key and saving the current frame to disk.</p>
<p>So let’s add it:</p>
<section id="first-add-the-necessary-import" class="level4">
<h4 class="anchored" data-anchor-id="first-add-the-necessary-import">1. First, add the necessary import</h4>
<p>At the top of the file, make sure we have:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</section>
<section id="create-a-directory-to-store-images" class="level4">
<h4 class="anchored" data-anchor-id="create-a-directory-to-store-images">2. Create a directory to store images</h4>
<p>Add this near the beginning of our <code>__init__</code> method:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store images if it doesn't exist</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tello_images'</span>):</span>
<span id="cb10-3">    os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tello_images'</span>)</span></code></pre></div>
</section>
<section id="add-a-key-handler-for-taking-snapshots" class="level4">
<h4 class="anchored" data-anchor-id="add-a-key-handler-for-taking-snapshots">3. Add a key handler for taking snapshots</h4>
<p>In the <code>keyup</code> method, add a case for a new key (I’ll use ‘p’ for “picture”):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> keyup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Update velocities based on key released """</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_UP <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_DOWN:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero forward/backward velocity</span></span>
<span id="cb11-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.for_back_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_LEFT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_RIGHT:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero left/right velocity</span></span>
<span id="cb11-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left_right_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_s:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero up/down velocity</span></span>
<span id="cb11-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_down_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_d:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set zero yaw velocity</span></span>
<span id="cb11-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaw_velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_t:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># takeoff</span></span>
<span id="cb11-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.takeoff()</span>
<span id="cb11-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_l:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># land</span></span>
<span id="cb11-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.land()</span>
<span id="cb11-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_rc_control <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_p:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take a snapshot</span></span>
<span id="cb11-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.take_snapshot()</span></code></pre></div>
</section>
<section id="add-the-snapshot-method" class="level4">
<h4 class="anchored" data-anchor-id="add-the-snapshot-method">4. Add the snapshot method</h4>
<p>Add this new method to our <code>FrontEnd</code> class:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> take_snapshot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Take a snapshot of the current frame and save it to disk</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the current frame</span></span>
<span id="cb12-6">    frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tello.get_frame_read().frame</span>
<span id="cb12-7">    </span>
<span id="cb12-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> frame <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a filename with timestamp</span></span>
<span id="cb12-10">        timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-%H%M%S"</span>)</span>
<span id="cb12-11">        filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tello_images/tello_snapshot_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.jpg"</span></span>
<span id="cb12-12">        </span>
<span id="cb12-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the image - note we save the original frame before any transformations</span></span>
<span id="cb12-14">        cv2.imwrite(filename, frame)</span>
<span id="cb12-15">        </span>
<span id="cb12-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Snapshot saved: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>The resulting code can be found <a href="https://github.com/pors/tello-play/blob/main/manual-control-pygame.py">here</a>.</p>
</section>
</section>
<section id="lets-try-it-out" class="level3">
<h3 class="anchored" data-anchor-id="lets-try-it-out">Let’s try it out!</h3>
<p>It all works just fine, here are some low res snapshots I made:</p>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142617.967533.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142635.818627.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142638.978236.jpg" class="img-fluid" width="250"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142643.129198.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142653.1736279.jpg" class="img-fluid" width="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots/image-1745142683.295296.jpg" class="img-fluid" width="250"></p>
</div>
</div>
</div>
<p>Navigating with a keyboard is a disaster, so….</p>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>To improve navigation we are going to hook up the GameSir T1d, <a href="../../posts/gamesir-t1d-controller/">read on..</a>.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/crash-the-tello/">← Previous: Crash the Tello</a>
</div>
<div>
<a href="../../posts/gamesir-t1d-controller/">Next: GameSir T1d &amp; pygame →</a>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>drone</category>
  <category>code</category>
  <guid>https://dronelab.dev/posts/key-navigation-video-snapshots/</guid>
  <pubDate>Sat, 26 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/key-navigation-video-snapshots/snapshots.png" medium="image" type="image/png" height="91" width="144"/>
</item>
<item>
  <title>Interlude: I’m a Pilot!</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/i-am-a-pilot/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-25</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Passed the EASA A1/A3 pilot exam, officially becoming a UAV (drone) pilot—childhood dream “fulfilled.”</li>
<li>Created a web-based EASA exam practice app to prep for the test, available online for free.</li>
<li>Shared app’s source code on GitHub for community use.</li>
</ul>
</div>
</div>
</div>
<section id="fulfilling-a-dream" class="level2">
<h2 class="anchored" data-anchor-id="fulfilling-a-dream">Fulfilling a dream</h2>
<p>As a kid I always wanted to be a pilot (not true, it just makes for a more interesting story), and now I just passed the EASA A1/A3 pilot exam!</p>
<p>Yeah, I know, this is a certification for UAV’s. UAV stands for Unmanned Aerial Vehicle, where you as a pilot stay on the ground. We can’t have it all.</p>
<p>I will need this certification to fly drones outdoors, even the tiny Tello requires the ground-bound pilot to have the authorization to fly drones.</p>
</section>
<section id="easa-a1a3-exam-practice-app" class="level2">
<h2 class="anchored" data-anchor-id="easa-a1a3-exam-practice-app">EASA A1/A3 Exam Practice App</h2>
<p>Anyway, to help me study, I (Claude.ai) created a practice app to go over all possible questions for the exam. I thought it might be handy for others so I put it up online here: <a href="https://dronelab.dev/easa-exam/">EASA A1/A3 exam test app</a>. The source code is <a href="https://github.com/pors/EASA-exam-practice">here</a>.</p>
<p><small>Beware: the source PDF with questions was used as the basis for the app, and the LLM made some mistakes. I think I have corrected most/all of them, but if you want to be sure please double check.</small></p>


</section>

 ]]></description>
  <category>drone</category>
  <category>open-source</category>
  <guid>https://dronelab.dev/posts/i-am-a-pilot/</guid>
  <pubDate>Thu, 24 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/i-am-a-pilot/pilot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Crash the Tello (with and without code)</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/crash-the-tello/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-24</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Unboxed and crashed a DJI Tello drone — first due to a buggy phone app, then because of the infamous “ceiling effect.”</li>
<li>Recommend using TelloFPV app and GameSir T1d controller for smoother manual flight experiences.</li>
<li>Explained basic drone movements clearly (throttle, yaw, pitch, roll).</li>
<li>Introduced DJI’s Python SDK for coding drone flight, setting the stage for further explorations with code.</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/enter-the-tello/">← Previous: Enter the Tello</a>
</div>
<div>
<a href="../../posts/key-navigation-video-snapshots/">Next: Key navigation &amp; Video snapshots →</a>
</div>
</div>
</div>
</div>
</div>
<section id="unboxed" class="level2">
<h2 class="anchored" data-anchor-id="unboxed">Unboxed</h2>
<p>Now that the drone is out of the box, we’re gonna take it for a spin (and yes it crashed). First with the phone app, then with code.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/crash-the-tello/crashed-TT.png" class="img-fluid figure-img"></p>
<figcaption>Crashed RoboMaster TT (generated by ChatGPT)</figcaption>
</figure>
</div>
<p><br></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These blog posts are intended to be read in order. If you want to follow along on my journey, start here: <a href="../../posts/enter-the-tello/">Enter the Tello</a>. Or ignore this and keep on reading below.</p>
</div>
</div>
</section>
<section id="first-tt-flight" class="level2">
<h2 class="anchored" data-anchor-id="first-tt-flight">First TT flight</h2>
<p>To fly a drone for the first time it is good to have a basic understanding how these quadcopters work, and what the basic movements are:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 79%">
</colgroup>
<thead>
<tr class="header">
<th>Movement</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>throttle</td>
<td>increases or decreases the height of the drone by adjusting all propellers equally</td>
</tr>
<tr class="even">
<td>yaw</td>
<td>turns the drone clockwise or counterclockwise by varying propeller speeds</td>
</tr>
<tr class="odd">
<td>pitch</td>
<td>moves the drone forward or backward by changing speeds between front and back propellers</td>
</tr>
<tr class="even">
<td>roll</td>
<td>moves the drone left or right by varying left and right propeller speeds</td>
</tr>
</tbody>
</table>
<p><br> This video explains very clearly how it works: </p><div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/C0KBu2ihp-s" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p></p>
<p>The Tello doesn’t come with a controller, we fly it through the Tello app. I used the Tello app for iPhone. This app hasn’t been updated for a long time and unfortunately it is useless as it crashes all the time. When the app crashes the drone keeps on hovering in the air, so this first crash is just a software crash.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you want to fly the TT or Tello manually I recommend you get the <a href="https://apps.apple.com/us/app/tellofpv/id1545864950">TelloFPV</a>. It’s not free, but doesn’t crash either.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>To really enjoy flying the TT manually you can get a controller that is customized for the Tello: the <a href="https://gamesir.com/pages/tello-tutorial">GameSir T1d</a>. I got one, and it works straight out of the box — even with the TelloFPV app.</p>
</div>
</div>
<section id="beware-of-the-ceiling-effect" class="level3">
<h3 class="anchored" data-anchor-id="beware-of-the-ceiling-effect">Beware of the ceiling effect</h3>
<p>While flying the drone around a bit in my office, I went up a bit too high and the drone crashed when it came near the ceiling. This phenomenon even has a name and is called the “ceiling effect.” Basically, the drone gets <a href="https://aviation.stackexchange.com/questions/59128/what-disadvantages-does-flying-a-drone-close-under-a-ceiling-have">sucked up to the ceiling</a> because there is not enough air to push down through the propellers.</p>
<p>Alright, now for the real fun — controlling the drone with code.</p>
</section>
</section>
<section id="the-tello-python-sdk" class="level2">
<h2 class="anchored" data-anchor-id="the-tello-python-sdk">The Tello Python SDK</h2>
<p>DJI provides an SDK for the Tello drone that can be used with Python. The SDK can be used to control the drone through its API. The API is fairly basic but supports:</p>
<ul>
<li>Flight control with takeoff, landing and movement commands</li>
<li>Flight status information (battery level, height, acceleration, speed)</li>
<li>Stream camera feed</li>
</ul>
<p>The Python library we will be using for this SDK is <a href="https://github.com/damiafuentes/DJITelloPy">DJITelloPy</a>.</p>
<p>A couple of useful resources:</p>
<ul>
<li><a href="https://dl.djicdn.com/downloads/RoboMaster+TT/Tello_SDK_3.0_User_Guide_en.pdf">SDK 3.0 user guide</a> (includes the API spec).</li>
<li><a href="https://robomaster-dev.readthedocs.io/en/latest/">RoboMaster Developer Guide</a> (also for RoboMasters on wheels).</li>
<li><a href="https://github.com/dji-sdk/RoboMaster-SDK">RoboMaster SDK</a> (as provided by DJI).</li>
<li><a href="https://djitellopy.readthedocs.io/en/latest/tello/">DJITelloPy API Reference</a>.</li>
</ul>
<p>To give it a try, let’s first install djitellopy:</p>
<div id="setup" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>{sys.executable} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m pip install djitellopy</span></code></pre></div>
</div>
<section id="take-off-fly-land" class="level3">
<h3 class="anchored" data-anchor-id="take-off-fly-land">Take-off, fly, land</h3>
<p>Let’s start with a simple script to take-off, fly, and land the drone.</p>
<p>To make this work the computer running the script needs to be connected to the Wifi Access Point the Tello provides. The SSID is of the form <code>TELLO-XXXXXX</code>.</p>
<div id="1765d13e" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> djitellopy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tello</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb2-3"></span>
<span id="cb2-4">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tello.Tello()</span>
<span id="cb2-5">t.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bat: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_battery()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Temp: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_temperature()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">t.takeoff()</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Send RC control via four channels. Command is sent every self.TIME_BTW_RC_CONTROL_COMMANDS seconds.</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Arguments:</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    left_right_velocity: -100~100 (left/right)</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    forward_backward_velocity: -100~100 (forward/backward)</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    up_down_velocity: -100~100 (up/down)</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    yaw_velocity: -100~100 (yaw)</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-19">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-20">sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-21">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-22">sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-23">t.send_rc_control(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't forget this!</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">t.land()</span>
<span id="cb2-26">t.end()</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre class="text"><code>[INFO] tello.py - 129 - Tello instance was initialized. Host: '192.168.1.85'. Port: '8889'.
[INFO] tello.py - 438 - Send command: 'command'
[INFO] tello.py - 462 - Response command: 'ok'
Bat: 100
Temp: 45.0
[INFO] tello.py - 438 - Send command: 'takeoff'
[INFO] tello.py - 462 - Response takeoff: 'ok'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 0 50 0 0'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 30 0 0 0'
[INFO] tello.py - 471 - Send command (no response expected): 'rc 0 0 0 0'
[INFO] tello.py - 438 - Send command: 'land'
[INFO] tello.py - 462 - Response land: 'ok'</code></pre>
</div>
<p>It is pretty straightforward. My first attempt made the drone crash though: not having the <code>t.send_rc_control(0, 0, 0, 0)</code> command there tells the drone to move sideways (to the right) while landing, with the expected result.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The code above was executed in my code editor and the output you see there is the actual output. Similar to a frozen Jupyter notebook. This is possible because this blog is powered by <a href="https://quarto.org">Quarto</a>. If you haven’t tried Quarto, maybe check it out.</p>
</div>
</div>
</section>
<section id="using-router-mode" class="level3">
<h3 class="anchored" data-anchor-id="using-router-mode">Using router mode</h3>
<p>It is quite annoying that the computer you are working on is not connected to the Internet while testing the code (it is connected to the wifi of the drone). Every five seconds I MUST check with Claude/ChatGPT if I am doing things right, no?</p>
<p>For the original Tello there is nothing we can do about that, but the RoboMaster TT has two <a href="https://robomaster-dev.readthedocs.io/en/latest/third_part_comm.html#wi-fi-connection">wifi connection modes</a>:</p>
<ul>
<li>Direct connection mode (aka AP mode): this is what we did so far, the Tello provides an access point and the computer connects to that.</li>
<li>Router mode (aka STA mode): both the TT and the computer connect to the same wifi router, so we are still online if that router is our home router.</li>
</ul>
<p>The TT has an expansion kit that contains a small microprocessor that provides wifi and Bluetooth connectivity: <a href="https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf">ESP32-D2WD</a>. We will have a look later to see what we can do with it, for now we just use the wifi in router mode. There is a tiny switch on the expansion unit that we can toggle between the two modes. It does involve a couple of other steps though, which are outlined here: <a href="https://robomaster-dev.readthedocs.io/en/latest/text_sdk/connection.html#connection-examples">Connection examples</a>. It didn’t work for me (there is no QR code I can get from the Tello app), so I will show you what I did:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before continuing, the controller needs to be activated from the Tello app! This happens after the firmware update of this controller. This cost me a couple of days of my life, so next time I’ll RTFM.</p>
</div>
</div>
<section id="step-1." class="level4">
<h4 class="anchored" data-anchor-id="step-1.">Step 1.</h4>
<p>Set the switch to AP mode first (down).</p>
</section>
<section id="step-2." class="level4">
<h4 class="anchored" data-anchor-id="step-2.">Step 2.</h4>
<p>Connect the PC to the RMTT-xxx network. We are now in direct connection mode, provided by the Wifi on the expansion kit.</p>
</section>
<section id="step-4" class="level4">
<h4 class="anchored" data-anchor-id="step-4">Step 4:</h4>
<p>Run this script:</p>
<div id="0c6affc6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> socket</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> getpass</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Environment variables for Wi-Fi credentials just to make it run in a notebook</span></span>
<span id="cb4-7">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_SSID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MyNetwork"</span></span>
<span id="cb4-8">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_PASSWORD"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SuperSecret"</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">sock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span>
<span id="cb4-11">sock.settimeout(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_wifi_credentials():</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-16">        ssid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wi-Fi SSID: "</span>)</span>
<span id="cb4-17">        password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getpass.getpass(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wi-Fi Password: "</span>)</span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">EOFError</span>, getpass.GetPassWarning, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb4-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fall back to environment variables</span></span>
<span id="cb4-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interactive input not available. Falling back to environment variables."</span>)</span>
<span id="cb4-21">        ssid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_SSID"</span>)</span>
<span id="cb4-22">        password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WIFI_PASSWORD"</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> ssid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> password:</span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb4-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing WIFI_SSID or WIFI_PASSWORD environment variable."</span></span>
<span id="cb4-27">            )</span>
<span id="cb4-28"></span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ssid, password</span>
<span id="cb4-30"></span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Enter SDK mode</span></span>
<span id="cb4-33">sock.sendto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"command"</span>, (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.1"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8889</span>))</span>
<span id="cb4-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-35">    response, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sock.recvfrom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb4-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response 1:"</span>, response)</span>
<span id="cb4-37"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No response to command:"</span>, e)</span>
<span id="cb4-39"></span>
<span id="cb4-40">time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Send ap command</span></span>
<span id="cb4-43">ssid, password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_wifi_credentials()</span>
<span id="cb4-44">sock.sendto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"ap %s %s"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (ssid.encode(), password.encode()), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.1"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8889</span>))</span>
<span id="cb4-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-46">    response, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sock.recvfrom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb4-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response 2:"</span>, response)</span>
<span id="cb4-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No response to ap:"</span>, e)</span></code></pre></div>
</div>
</section>
<section id="step-5" class="level4">
<h4 class="anchored" data-anchor-id="step-5">Step 5:</h4>
<p>Toggle the switch to STA mode (up).</p>
</section>
<section id="step-6" class="level4">
<h4 class="anchored" data-anchor-id="step-6">Step 6:</h4>
<p>Connect the PC to the wifi network you provided in the script above.</p>
</section>
<section id="step-7" class="level4">
<h4 class="anchored" data-anchor-id="step-7">Step 7:</h4>
<p>Find the IP address that was assigned to the TT (e.g.&nbsp;in your home router admin settings).</p>
</section>
<section id="step-8" class="level4">
<h4 class="anchored" data-anchor-id="step-8">Step 8:</h4>
<p>Use this IP address every time you connect to the Tello in your code:</p>
<div id="c6d45296" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tello.Tello(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.85"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the IP address from step 7</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">t.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span></code></pre></div>
</div>
<p>From here on we can connect to the TT and also be connected to the Internet. Yay!</p>
</section>
</section>
<section id="thanks" class="level3">
<h3 class="anchored" data-anchor-id="thanks">Thanks!</h3>
<p>I want to thank <a href="https://github.com/murtazahassan">Murtaza Hassan</a> for getting me started through this video: <a href="https://www.youtube.com/watch?v=LmEcyQnfpDA">Drone Programming With Python Course</a>.</p>
<hr>
</section>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>In the next episode I’m going to implement keyboard control and stream video frames to the PC and save them on disk on demand (“inspired” by Murtaza <sup>1</sup>).</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>
<a href="../../posts/enter-the-tello/">← Previous: Enter the Tello</a>
</div>
<div>
<a href="../../posts/key-navigation-video-snapshots/">Next: Key navigation &amp; Video snapshots →</a>
</div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Borrowed is the real word here. No: stolen!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>drone</category>
  <category>code</category>
  <guid>https://dronelab.dev/posts/crash-the-tello/</guid>
  <pubDate>Wed, 23 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/crash-the-tello/crashed-TT2.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Enter the Tello</title>
  <dc:creator>Mark Pors</dc:creator>
  <link>https://dronelab.dev/posts/enter-the-tello/</link>
  <description><![CDATA[ 

<header id="title-block-header">

<p class="author">Mark Pors</p>

<p class="date">2025-04-20</p>
</header>


<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Combined interests in hiking, coding, and new tech led to a drone project idea</li>
<li>Goal: build an autonomous scouting drone for hiking adventures</li>
<li>Started with no drone or computer vision experience</li>
<li>Resisted the urge to over-invest at first (just bought the domain dronelab.dev)</li>
<li>Chose the DJI RoboMaster TT as a beginner-friendly, programmable drone</li>
<li>Next steps: experiment with the RoboMaster TT, both manually and with code</li>
</ul>
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>

</div>
<div>
<a href="../../posts/crash-the-tello/">Next: Crash the Tello →</a>
</div>
</div>
</div>
</div>
</div>
<section id="combine-the-stuff-you-like" class="level2">
<h2 class="anchored" data-anchor-id="combine-the-stuff-you-like">Combine the stuff you like</h2>
<p>“Combine the stuff you like” is good advice when looking for a new project to work on. I like to follow good advice and so I brainstormed a bit with ChatGPT to find interesting intersections between my interests. Some of my favorite activities — like sex, meditation, and reading — didn’t quite lend themselves to computer vision projects. Others had more potential: hiking in nature, coding, learning about new tech.</p>
</section>
<section id="autonomous-scouting-drone" class="level2">
<h2 class="anchored" data-anchor-id="autonomous-scouting-drone">Autonomous scouting drone</h2>
<p>Having a drone accompany us on hikes to do some scouting ahead hits the mark for me. It includes hiking and coding, and most important: I need to learn a lot to make a drone do what I want. I have zero experience with drones and very limited experience with computer vision models.</p>
</section>
<section id="getting-ready-big-time" class="level2">
<h2 class="anchored" data-anchor-id="getting-ready-big-time">Getting ready big time</h2>
<p>Like any self-respecting tech nerd, I decided to kick things off in style:</p>
<ol type="1">
<li>Buy a domain name (most important!)</li>
<li>Get a logo (as important!)</li>
<li>Buy the best dev/DIY drone out there</li>
<li>Buy a top line PC to train models</li>
<li>Buy another PC to run simulation environments</li>
</ol>
<p>OK, guilty — I bought the domain (hello <a href="../..">dronelab.dev</a>), but <em>tried</em> to stop myself there <sup>1</sup> <sup>2</sup>. I don’t know anything about drones, and might get bored with the project after a couple of weeks, so better start small.</p>
</section>
<section id="enter-the-tello" class="level2">
<h2 class="anchored" data-anchor-id="enter-the-tello">Enter the Tello</h2>
<p>I stumbled upon a modest little drone from way back in 2018 <sup>3</sup> — the DJI Tello — and it was perfect for my first steps. It can fly indoors, is programmable and has a camera.</p>
<p>There is an even better version of it with some extra goodies that might come in handy:</p>
<ul>
<li>an onboard processor</li>
<li>a matrix display</li>
<li>a distance sensor</li>
</ul>
<p>So I bought the DJI RoboMaster TT. TT stands for Tello Talent — basically smart kids coding drones at an age I was still figuring out crayons.</p>
<p>Look at that beauty!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dronelab.dev/posts/enter-the-tello/tt.jpg" class="img-fluid figure-img"></p>
<figcaption>DJI RoboMaster TT</figcaption>
</figure>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>In the next episode I will play with the RoboMaster TT, both with and without code to control it. It includes different ways to crash it. <a href="../../posts/crash-the-tello">Read on…</a></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="text-align: center;">
<p><strong>Series: <a href="../../series/">Code, Fly &amp; AI</a></strong></p>
</div>
<div style="display: flex; justify-content: space-between; margin-top: 0.5em;">
<div>

</div>
<div>
<a href="../../posts/crash-the-tello/">Next: Crash the Tello →</a>
</div>
</div>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I always buy the domain first, even before I know what I’m doing.↩︎</p></li>
<li id="fn2"><p>I didn’t really stop myself there, I also created a logo. Technically ChatGPT did: <img src="https://dronelab.dev/posts/enter-the-tello/logo_high.png" class="img-fluid" alt="dronelab">↩︎</p></li>
<li id="fn3"><p>2018, also the last time I blogged something: <a href="https://decentralized.blog/">decentralized.blog</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>drone</category>
  <guid>https://dronelab.dev/posts/enter-the-tello/</guid>
  <pubDate>Sat, 19 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://dronelab.dev/posts/enter-the-tello/tt.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
